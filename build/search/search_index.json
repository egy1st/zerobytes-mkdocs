{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ZeroBytes.One If you are asking yourself, why this website called zero bytes, then let me tell you a secret \"I just create zeros to give you the power to create complete bytes\". In a nutshell, Zero Bytes is a journey from 0 ==> 1, from NULL to totally Full, from no thing to some thing, from 0 000 0000 ==> 0000 000 1 What Will You Get From These Bytes? Keep up with the future with in-demand data science knowledge. Top companies need data science skills. Learn at your own pace, Where Free means Premium. Python: A complete Byte MS Excel: step by step DenMune: Density-based clustering DenMune: Documentation MS Excel: Interactive Training Counting in 13 Languages including Arabic, English & Chinese Counting in 13 Languages including Arabic, English & Chinese ZeroBytes: When less means more \"Obviously, there is a trade-off between gaining knowledge and the costly time and money to obtain these knowledge. In ZeroBytes we believe that knowledge should be available to learner in premium, but at no cost.\" \"When Free means Premium. When less means More. This is the most complex formula we master in ZeroBytes. We just started.. There are many things that seem impossible only so long as one does not attempt them.\" \"Our mission is to make the Arab world a better place to learn, gain knowledge and apply these knowledge to solve real-life problems that is result in leading a better life.\" Please see the projects license for further details.","title":"Home"},{"location":"#welcome-to-zerobytesone","text":"If you are asking yourself, why this website called zero bytes, then let me tell you a secret \"I just create zeros to give you the power to create complete bytes\". In a nutshell, Zero Bytes is a journey from 0 ==> 1, from NULL to totally Full, from no thing to some thing, from 0 000 0000 ==> 0000 000 1","title":"Welcome to ZeroBytes.One"},{"location":"#what-will-you-get-from-these-bytes","text":"Keep up with the future with in-demand data science knowledge. Top companies need data science skills. Learn at your own pace, Where Free means Premium. Python: A complete Byte MS Excel: step by step DenMune: Density-based clustering DenMune: Documentation MS Excel: Interactive Training Counting in 13 Languages including Arabic, English & Chinese Counting in 13 Languages including Arabic, English & Chinese","title":"What Will You Get From These Bytes?"},{"location":"#zerobytes-when-less-means-more","text":"\"Obviously, there is a trade-off between gaining knowledge and the costly time and money to obtain these knowledge. In ZeroBytes we believe that knowledge should be available to learner in premium, but at no cost.\" \"When Free means Premium. When less means More. This is the most complex formula we master in ZeroBytes. We just started.. There are many things that seem impossible only so long as one does not attempt them.\" \"Our mission is to make the Arab world a better place to learn, gain knowledge and apply these knowledge to solve real-life problems that is result in leading a better life.\" Please see the projects license for further details.","title":"ZeroBytes: When less means more"},{"location":"about/","text":"About Me: Mohamed Ali Abbas Experienced Data Analyst with a demonstrated history of working in the government administration industry. Skilled in Python, C++ and Statistical Data Analysis. strong information technology professional with a MSc in Computer Science and PhD in Information Technology. Focused in data mining, machine learning and pattern recognition. A Recognized Instructor in many reputable organizations.","title":"About"},{"location":"about/#about-me-mohamed-ali-abbas","text":"Experienced Data Analyst with a demonstrated history of working in the government administration industry. Skilled in Python, C++ and Statistical Data Analysis. strong information technology professional with a MSc in Computer Science and PhD in Information Technology. Focused in data mining, machine learning and pattern recognition. A Recognized Instructor in many reputable organizations.","title":"About Me: Mohamed Ali Abbas"},{"location":"license/","text":"BSD 3-Clause License Copyright (c) [2021], [Mohamed Ali Abbas] Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"BSD 3-Clause License"},{"location":"license/#bsd-3-clause-license","text":"Copyright (c) [2021], [Mohamed Ali Abbas] Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"BSD 3-Clause License"},{"location":"certificates/","text":"Am I Certified? List of my Obtained Certificates: IBM-Data-Science-Professional-Certificate","title":"Certificates"},{"location":"certificates/#am-i-certified","text":"List of my Obtained Certificates: IBM-Data-Science-Professional-Certificate","title":"Am I Certified?"},{"location":"certificates/IBM/","text":"IBM-Data-Science-Professional-Certificate Back in January, 2019, I did these projects many years ago as a requirement to obtain my IBM Data Science Professional Certificate. About This Certificate Certificate name: Data Science Professional Certificate Certificate URL: https://coursera.org/share/5cf76b4a724b6f51c8aafdcdd1ed8396 Issued by Coursera Authorized by IBM I have been awarded 13 badges on obtaining this certificate https://www.credly.com/users/mohamed-abbas.1f43f901/badges https://www.credly.com/org/ibm/badge/data-science-professional-certificate-v2 What Credly tells about me The badge earner is ready for a career in data science with demonstrated ability to solve for real-world problems. They can apply Data Science methodology - work with Jupyter notebooks - create Python apps - access relational databases using SQL & Python - use Python libraries to generate data visualizations - perform data analysis using Pandas - construct & evaluate Machine Learning (ML) models using Scikit-learn & SciPy and apply data science & ML techniques to real location data sets. Earning Criteria Complete all courses in the IBM Data Science Professional Certificate program on Coursera (includes quizzes, hands-on assignments and projects), and earn the following badges: Data Science Orientation Tools for Data Science Data Science Methodology Python for Data Science and AI Databases and SQL for Data Science Data Visualization with Python Data Analysis with Python Machine Learning with Python Applied Data Science Capstone Python Project for Data Science Receive the Data Science Professional Certificate from Coursera. Haga clic aqu\u00ed para la versi\u00f3n en Espa\u00f1ol: Ciencia de Datos de IBM Professional Certificate Endorsements American Council on Education CREDIT This credential has been successfully evaluated by the American Council on Education for college credit. It is recommended for a total of 12 college credits. For more information about ACE Learning Evaluations, visit www.acenet.edu. Skills AI Artificial Intelligence Bokeh Classification Clustering Data Analysis Database Data Science Data Visualization Db2 Folium Foursquare IBM Cloud Jupyter Location Machine Learning Matplotlib Methodology ML Notebook NumPy Pandas Python Recommender Systems Regression RStudio Scikit-learn SciPy Seaborn SQL Studio Watson Zeppelin Certificate Verification https://www.coursera.org/account/accomplishments/specialization/certificate/7ECY2S6SQBEJ https://www.credly.com/badges/3bcd7d62-335a-462f-9075-68e17e96ae12","title":"IBM-Data-Science-Professional-Certificate"},{"location":"certificates/IBM/#ibm-data-science-professional-certificate","text":"Back in January, 2019, I did these projects many years ago as a requirement to obtain my IBM Data Science Professional Certificate.","title":"IBM-Data-Science-Professional-Certificate"},{"location":"certificates/IBM/#about-this-certificate","text":"Certificate name: Data Science Professional Certificate Certificate URL: https://coursera.org/share/5cf76b4a724b6f51c8aafdcdd1ed8396 Issued by Coursera Authorized by IBM","title":"About This Certificate"},{"location":"certificates/IBM/#i-have-been-awarded-13-badges-on-obtaining-this-certificate","text":"https://www.credly.com/users/mohamed-abbas.1f43f901/badges https://www.credly.com/org/ibm/badge/data-science-professional-certificate-v2","title":"I have been awarded 13 badges on obtaining this certificate"},{"location":"certificates/IBM/#what-credly-tells-about-me","text":"The badge earner is ready for a career in data science with demonstrated ability to solve for real-world problems. They can apply Data Science methodology - work with Jupyter notebooks - create Python apps - access relational databases using SQL & Python - use Python libraries to generate data visualizations - perform data analysis using Pandas - construct & evaluate Machine Learning (ML) models using Scikit-learn & SciPy and apply data science & ML techniques to real location data sets.","title":"What Credly tells about me"},{"location":"certificates/IBM/#earning-criteria","text":"Complete all courses in the IBM Data Science Professional Certificate program on Coursera (includes quizzes, hands-on assignments and projects), and earn the following badges: Data Science Orientation Tools for Data Science Data Science Methodology Python for Data Science and AI Databases and SQL for Data Science Data Visualization with Python Data Analysis with Python Machine Learning with Python Applied Data Science Capstone Python Project for Data Science Receive the Data Science Professional Certificate from Coursera. Haga clic aqu\u00ed para la versi\u00f3n en Espa\u00f1ol: Ciencia de Datos de IBM Professional Certificate","title":"Earning Criteria"},{"location":"certificates/IBM/#endorsements","text":"American Council on Education CREDIT This credential has been successfully evaluated by the American Council on Education for college credit. It is recommended for a total of 12 college credits. For more information about ACE Learning Evaluations, visit www.acenet.edu.","title":"Endorsements"},{"location":"certificates/IBM/#skills","text":"AI Artificial Intelligence Bokeh Classification Clustering Data Analysis Database Data Science Data Visualization Db2 Folium Foursquare IBM Cloud Jupyter Location Machine Learning Matplotlib Methodology ML Notebook NumPy Pandas Python Recommender Systems Regression RStudio Scikit-learn SciPy Seaborn SQL Studio Watson Zeppelin","title":"Skills"},{"location":"certificates/IBM/#certificate-verification","text":"https://www.coursera.org/account/accomplishments/specialization/certificate/7ECY2S6SQBEJ https://www.credly.com/badges/3bcd7d62-335a-462f-9075-68e17e96ae12","title":"Certificate Verification"},{"location":"courses/","text":"ML Bytes Data Analysis Courses Python Miceosoft Excel :octicons-heart-fill-24:{ .heart }","title":"Dynamic Components"},{"location":"courses/#ml-bytes","text":"Data Analysis Courses Python Miceosoft Excel :octicons-heart-fill-24:{ .heart }","title":"ML Bytes"},{"location":"courses/excel/","text":"\u0641\u0649 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633 \u062a\u0639\u0644\u0645 \u0627\u0644\u0645\u0628\u0627\u062f\u0626 \u0627\u0644\u0627\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0628\u0631\u0646\u0627\u0645\u062c \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0623 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0630\u0649 \u064a\u0633\u062a\u062e\u062f\u0645\u0647 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0641\u0649 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062e\u0644\u0627\u064a\u0627 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0627\u0644\u062e\u0644\u064a\u0629 \u0648 \u0645\u062d\u062a\u0648\u0649 \u0627\u0644\u062e\u0644\u064a\u0629 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0646\u0633\u062e \u0627\u0644\u0623\u0631\u0642\u0627\u0645 \u0648 \u0646\u0633\u062e \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0627\u062a \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0646\u0633\u0628\u064a\u0629 \u0648 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0645\u0637\u0644\u0642\u0629 \u062a\u0639\u0631\u0641 \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u0645\u062d\u0627\u0633\u0628\u064a\u0629 \u0627\u0644\u0627\u0633\u0627\u0633\u0627\u0633\u064a\u0629 \u0644\u0645\u0627\u0630\u0627 \u0632\u064a\u0631\u0648\u0628\u0627\u062a\u0633 \u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u0623\u0645\u062b\u0644\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0628\u0633\u064a\u0637\u0629 \u0648 \u0627\u0644\u0634\u0627\u0645\u0644\u0629 \u0641\u0649 \u0646\u0641\u0633 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u0644 \u0645\u0627 \u062a\u0639\u0644\u0645\u062a\u0647 \u062e\u0644\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633 \u0623\u0633\u0644\u0648\u0628 \u0628\u0633\u064a\u0637 \u0648 \u0639\u0644\u0645\u0649 \u0641\u0649 \u062a\u0648\u0635\u064a\u0644 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0629 \u062a\u062d\u062f\u064a\u062b \u0645\u0633\u062a\u0645\u0631 \u0644\u0645\u062d\u062a\u0648\u064a\u0627\u062a \u0627\u0644\u062f\u0648\u0631\u0629 \u0645\u062a\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0643\u0648\u0631\u0633 \u0627\u0644\u0645\u0628\u0627\u062f\u0626 \u0627\u0644\u0627\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0627\u0644\u0643\u0645\u0628\u064a\u0648\u062a\u0631 \u0644\u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633 \u0627\u0644\u0645\u0628\u062a\u062f\u0626\u064a\u0646 \u0627\u0644\u0630\u064a\u0646 \u0644\u0627 \u064a\u0639\u0631\u0641\u0648\u0646 \u0634\u064a\u0626\u0627\u064b \u0646\u0647\u0627\u0626\u064a\u0627\u064b \u0639\u0646 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0644\u062f\u0627\u0631\u0633\u064a\u0646 \u0627\u0644\u0633\u0627\u0628\u0642\u064a\u0646 \u0644\u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0644\u0630\u064a\u0646 \u064a\u0631\u064a\u062f\u0648\u0646 \u0641\u0647\u0645 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0630\u0649 \u064a\u0639\u0645\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644\u0647 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c","title":"\u0645\u0627\u0630\u0627 \u0633\u062a\u062a\u0639\u0644\u0645 \u0641\u0649 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633"},{"location":"courses/excel/#_1","text":"\u062a\u0639\u0644\u0645 \u0627\u0644\u0645\u0628\u0627\u062f\u0626 \u0627\u0644\u0627\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0628\u0631\u0646\u0627\u0645\u062c \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0623 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0630\u0649 \u064a\u0633\u062a\u062e\u062f\u0645\u0647 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0641\u0649 \u0628\u0631\u0645\u062c\u0629 \u0627\u0644\u062e\u0644\u0627\u064a\u0627 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0627\u0644\u062e\u0644\u064a\u0629 \u0648 \u0645\u062d\u062a\u0648\u0649 \u0627\u0644\u062e\u0644\u064a\u0629 \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0646\u0633\u062e \u0627\u0644\u0623\u0631\u0642\u0627\u0645 \u0648 \u0646\u0633\u062e \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0627\u062a \u0627\u0641\u0647\u0645 \u062c\u064a\u062f\u0627\u064b \u0627\u0644\u0641\u0631\u0642 \u0628\u064a\u0646 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0646\u0633\u0628\u064a\u0629 \u0648 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0645\u0637\u0644\u0642\u0629 \u062a\u0639\u0631\u0641 \u0639\u0644\u0649 \u0628\u0639\u0636 \u0627\u0644\u062f\u0648\u0627\u0644 \u0627\u0644\u0645\u062d\u0627\u0633\u0628\u064a\u0629 \u0627\u0644\u0627\u0633\u0627\u0633\u0627\u0633\u064a\u0629","title":"\u0641\u0649 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633"},{"location":"courses/excel/#_2","text":"\u0639\u062f\u062f \u0645\u0646 \u0627\u0644\u0623\u0645\u062b\u0644\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u0628\u0633\u064a\u0637\u0629 \u0648 \u0627\u0644\u0634\u0627\u0645\u0644\u0629 \u0641\u0649 \u0646\u0641\u0633 \u0627\u0644\u0648\u0642\u062a \u0644\u0643\u0644 \u0645\u0627 \u062a\u0639\u0644\u0645\u062a\u0647 \u062e\u0644\u0627\u0644 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633 \u0623\u0633\u0644\u0648\u0628 \u0628\u0633\u064a\u0637 \u0648 \u0639\u0644\u0645\u0649 \u0641\u0649 \u062a\u0648\u0635\u064a\u0644 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0629 \u062a\u062d\u062f\u064a\u062b \u0645\u0633\u062a\u0645\u0631 \u0644\u0645\u062d\u062a\u0648\u064a\u0627\u062a \u0627\u0644\u062f\u0648\u0631\u0629","title":"\u0644\u0645\u0627\u0630\u0627 \u0632\u064a\u0631\u0648\u0628\u0627\u062a\u0633"},{"location":"courses/excel/#_3","text":"\u0627\u0644\u0645\u0628\u0627\u062f\u0626 \u0627\u0644\u0627\u0633\u0627\u0633\u064a\u0629 \u0644\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0627\u0644\u0643\u0645\u0628\u064a\u0648\u062a\u0631","title":"\u0645\u062a\u0637\u0644\u0628\u0627\u062a \u0627\u0644\u0643\u0648\u0631\u0633"},{"location":"courses/excel/#_4","text":"\u0627\u0644\u0645\u0628\u062a\u062f\u0626\u064a\u0646 \u0627\u0644\u0630\u064a\u0646 \u0644\u0627 \u064a\u0639\u0631\u0641\u0648\u0646 \u0634\u064a\u0626\u0627\u064b \u0646\u0647\u0627\u0626\u064a\u0627\u064b \u0639\u0646 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0644\u062f\u0627\u0631\u0633\u064a\u0646 \u0627\u0644\u0633\u0627\u0628\u0642\u064a\u0646 \u0644\u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644 \u0627\u0644\u0630\u064a\u0646 \u064a\u0631\u064a\u062f\u0648\u0646 \u0641\u0647\u0645 \u0627\u0644\u0645\u0646\u0637\u0642 \u0627\u0644\u0630\u0649 \u064a\u0639\u0645\u0644 \u0645\u0646 \u062e\u0644\u0627\u0644\u0647 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c","title":"\u0644\u0645\u0646 \u0647\u0630\u0627 \u0627\u0644\u0643\u0648\u0631\u0633"},{"location":"courses/excel/excel-01-00/","text":"","title":"\u0645\u0627\u0644\u0643 \u064a\u0627 \u0641\u0643\u0631\u0649"},{"location":"courses/excel/excel-01-01/","text":"","title":"\u0645\u0627 \u0647\u0648 \u0646\u0638\u0627\u0645 \u0627\u0644\u0627\u062d\u062f\u0627\u062b\u0627\u064a\u0627\u062a \u0627\u0644\u0634\u0628\u0643\u0649"},{"location":"courses/excel/excel-01-02/","text":"","title":"\u0628\u062f\u0627\u0626\u064a\u0627\u062a \u0627\u0644\u062a\u0639\u0627\u0645\u0644 \u0645\u0639 \u0627\u0643\u0633\u064a\u0644"},{"location":"courses/excel/excel-01-03/","text":"","title":"\u062a\u063a\u064a\u064a\u0631 \u0627\u0631\u062a\u0641\u0627\u0639 \u0627\u0644\u0635\u0641\u0648\u0641 \u0648 \u0639\u0631\u0636 \u0627\u0644\u0623\u0639\u0645\u062f\u0629"},{"location":"courses/excel/excel-01-04/","text":"","title":"\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u0643\u0633\u064a\u0644 \u0643\u0622\u0644\u0629 \u062d\u0627\u0633\u0628\u0629"},{"location":"courses/excel/excel-01-05/","text":"","title":"\u0644\u0645\u0627\u0630\u0627 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0627\u0643\u0633\u064a\u0644"},{"location":"courses/excel/excel-01-06/","text":"","title":"\u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0648\u0648\u0631\u062f \u0623\u0645 \u0645\u064a\u0643\u0631\u0648\u0633\u0648\u0641\u062a \u0623\u0643\u0633\u064a\u0644"},{"location":"courses/excel/excel-01-07/","text":"","title":"\u0645\u0644\u0641\u0627\u062a \u0627\u0644\u062f\u0648\u0631\u0629 \u0627\u0644\u062a\u062f\u0631\u064a\u0628\u064a\u0629"},{"location":"courses/excel/excel-02-01/","text":"","title":"\u0646\u0638\u0627\u0645 \u0627\u0644\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u0649"},{"location":"courses/excel/excel-02-02/","text":"","title":"\u0645\u0641\u0647\u0648\u0645 \u062d\u0627\u0648\u064a\u0627\u062a \u0627\u0644\u0623\u0631\u0642\u0627\u0645 - The Black Box"},{"location":"courses/excel/excel-02-03/","text":"","title":"\u062c\u0645\u0639 \u0631\u0642\u0645\u064a\u0646: \u0627\u0644\u0641\u0643\u0631\u0629"},{"location":"courses/excel/excel-02-04/","text":"","title":"\u0645\u062b\u0627\u0644 \u062a\u0637\u0628\u064a\u0642\u0649: \u062c\u0645\u0639 \u0631\u0642\u0645\u064a\u0646"},{"location":"courses/excel/excel-02-05/","text":"","title":"\u0627\u0644\u0639\u0645\u0644\u064a\u0627\u062a \u0627\u0644\u062d\u0633\u0627\u0628\u064a\u0629 \u062f\u0627\u062e\u0644 \u0627\u0643\u0633\u064a\u0644"},{"location":"courses/excel/excel-02-06/","text":"","title":"\u0645\u0627 \u0647\u0649 \u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0646\u0633\u0628\u064a\u0629"},{"location":"courses/excel/excel-03-01/","text":"","title":"\u062a\u0645\u0647\u064a\u062f \u0644\u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629"},{"location":"courses/excel/excel-03-02/","text":"","title":"\u0645\u0627 \u0647\u0649 \u0627\u0644\u0646\u0637\u0627\u0642\u0627\u062a"},{"location":"courses/excel/excel-03-03/","text":"","title":"\u0645\u062b\u0627\u0644 \u062a\u0648\u0636\u064a\u062d\u0649 \u0644\u0645\u0627\u0647\u064a\u0629 \u0627\u0644\u0646\u0637\u0627\u0642\u0627\u062a"},{"location":"courses/excel/excel-03-04/","text":"","title":"\u062a\u0637\u0628\u064a\u0642 \u062f\u0627\u0644\u0629 \u0627\u0644\u062c\u0645\u0639 \u0639\u0644\u0649 \u0646\u0637\u0627\u0642 \u0645\u0646 \u0627\u0644\u062e\u0644\u0627\u064a\u0627"},{"location":"courses/excel/excel-03-05/","text":"","title":"\u0646\u0633\u062e \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0627\u062a"},{"location":"courses/excel/excel-03-06/","text":"","title":"\u0646\u0633\u062e \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0627\u062a \u0639\u0646 \u0637\u0631\u064a\u0642 \u0627\u0644\u0633\u062d\u0628"},{"location":"courses/excel/excel-03-07/","text":"","title":"\u0627\u0633\u062a\u0643\u0645\u0627\u0644 \u0627\u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0639\u0645\u0644\u064a\u0629 \u0644\u0644\u0645\u0628\u064a\u0639\u0627\u062a \u0648 \u0627\u0644\u0645\u0634\u062a\u0631\u064a\u0627\u062a"},{"location":"courses/excel/excel-03-08/","text":"","title":"\u0643\u0644 \u0647\u0630\u0627 \u0627\u0644\u0643\u0645 \u0645\u0646 \u0627\u0644\u062a\u062d\u062f\u064a\u062b\u0627\u062a \u0627\u0644\u062a\u0644\u0642\u0627\u0626\u064a\u0629 \u0639\u0646\u062f \u062a\u063a\u064a\u064a\u0631 \u0631\u0642\u0645"},{"location":"courses/excel/excel-04-01/","text":"","title":"\u0646\u0633\u062e \u0627\u0644\u0645\u0639\u0627\u062f\u0644\u0627\u062a \u0628\u0623\u0643\u062b\u0631 \u0645\u0646 \u0637\u0631\u064a\u0642\u0629"},{"location":"courses/excel/excel-04-02/","text":"","title":"\u062a\u0637\u0628\u064a\u0642 \u062f\u0627\u0644\u0629 \u0627\u0644\u062a\u062c\u0645\u064a\u0639 \u0639\u0644\u0649 \u0646\u0637\u0627\u0642 \u0645\u0646 \u0627\u0644\u062e\u0644\u0627\u064a\u0627"},{"location":"courses/excel/excel-04-03/","text":"","title":"\u0644\u0645\u0627\u0630\u0627 \u062a\u0638\u0647\u0631 \u0627\u0644\u0623\u0631\u0642\u0627\u0645 \u0647\u0643\u0630\u0627"},{"location":"courses/excel/excel-04-04/","text":"","title":"\u062f\u0627\u0644\u0629 \u0627\u0644\u0645\u062a\u0648\u0633\u0637 \u0627\u0644\u062d\u0633\u0627\u0628\u0649"},{"location":"courses/excel/excel-04-05/","text":"","title":"\u0643\u0645 \u0639\u062f\u062f \u0627\u0644\u0637\u0644\u0627\u0628"},{"location":"courses/excel/excel-04-06/","text":"","title":"\u0627\u0644\u0645\u0631\u0627\u062c\u0639 \u0627\u0644\u0645\u0637\u0644\u0642\u0629"},{"location":"courses/excel/excel-05-01/","text":"","title":"\u0627\u0644\u062a\u0646\u0633\u064a\u0642 \u0627\u0644\u0634\u0631\u0637\u0649"},{"location":"courses/excel/excel-05-02/","text":"","title":"if \u0642\u0627\u0639\u062f\u0629"},{"location":"courses/excel/excel-05-03/","text":"","title":"\u0631\u0633\u0645 \u0628\u064a\u0627\u0646\u0649 \u0648\u0627\u062d\u062f \u0623\u0641\u0636\u0644 \u0645\u0646 \u0623\u0644\u0641 \u0631\u0642\u0645"},{"location":"courses/excel/excel-05-04/","text":"","title":"\u062d\u0627\u0644\u0629 \u0639\u0645\u0644\u064a\u0629 \u062c\u062f\u064a\u062f\u0629"},{"location":"courses/excel/excel-05-05/","text":"","title":"\u0648 \u0645\u0627\u0630\u0627 \u0628\u0639\u062f"},{"location":"courses/python/","text":"What Python is Python is an interpreted programming language Easy to Learn Rich Packges Repsitory Why Python What is Python used for? What Python is Python is an interpreted programming language This means you don't have to compile an entire program to see the results of your code as in many other languages like C++ which compiles all code and produces an executable file to run. On contraray yo that, Python executes statements individually (onr by one) and allows you check the results consequently. Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python is an object-oriented (based around data), high-level (easier for humans to understand) programming language. First launched in 1992, it\u2019s built in a way that it\u2019s relatively intuitive to write and understand. As such, it\u2019s an ideal coding language for those who want rapid development. Easy to Learn Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Rich Packges Repsitory Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed. Why Python If you\u2019re wondering who uses Python, you\u2019ll find that many of the biggest organisations in the world implement it in some form. NASA, Google, Netflix, Spotify, and countless more all use the language to help power their services. According to the TIOBE index, which measures the popularity of programming languages, Python is the third most popular programming language in the world, behind only Java and C. There are many reasons for the ubiquity of Python, including: Its ease of use. For those who are new to coding and programming, Python can be an excellent first step. It\u2019s relatively easy to learn, making it a great way to start building your programming knowledge. Its simple syntax. Python is relatively easy to read and understand, as its syntax is more like English. Its straightforward layout means that you can work out what each line of code is doing. Its thriving community. As it\u2019s an open-source language, anyone can use Python to code. What\u2019s more, there is a community that supports and develops the ecosystem, adding their own contributions and libraries. Its versatility. As we\u2019ll explore in more detail, there are many uses for Python. Whether you\u2019re interested in data visualisation, artificial intelligence or web development, you can find a use for the language. The most striking example is Python that took over the second position from Java. Why is Python so popular? According to the TIOBE index, which measures the popularity of programming languages, Python is the third most popular programming language in the world, behind only Java and C. There are many reasons for the ubiquity of Python, including: Its ease of use. For those who are new to coding and programming, Python can be an excellent first step. It\u2019s relatively easy to learn, making it a great way to start building your programming knowledge. Its simple syntax. Python is relatively easy to read and understand, as its syntax is more like English. Its straightforward layout means that you can work out what each line of code is doing. Its thriving community. As it\u2019s an open-source language, anyone can use Python to code. What\u2019s more, there is a community that supports and develops the ecosystem, adding their own contributions and libraries. Its versatility. As we\u2019ll explore in more detail, there are many uses for Python. Whether you\u2019re interested in data visualisation, artificial intelligence or web development, you can find a use for the language. Why learn Python? So, we know why Python is so popular at the moment, but why should you learn how to use it? Aside from the ease of use and versatility mentioned above, there are several good reasons to learn Python: Python developers are in demand. Across a wide range of fields, there is a demand for those with Python skills. If you\u2019re looking to start or change your career, it could be a vital skill to help you. It could lead to a well-paid career. Data suggests that the median annual salary for those with Python skills is around \u00a365,000 in the UK. There will be many job opportunities. Given that Python can be used in many emerging technologies, such as AI, machine learning, and data analytics, it\u2019s likely that it\u2019s a future-proof skill. Learning Python now could benefit you across your career. How long does it take to learn Python? As we\u2019ve mentioned already, Python is a relatively straightforward programming language compared to many others. As such, it\u2019s possible to learn the basics over just a few weeks. Many of our short courses, such as Getting Started with Python, take 6-8 weeks to complete, with only a few hours of learning required each week. What is Python used for? Clearly, Python is a popular and in-demand skill to learn. But what is python programming used for? We\u2019ve already briefly touched on some of the areas it can be applied to, and we\u2019ve expanded on these and more Python examples below. Python can be used for: AI and machine learning Because Python is such a stable, flexible, and simple programming language, it\u2019s perfect for various machine learning (ML) and artificial intelligence (AI) projects. In fact, Python is among the favourite languages among data scientists, and there are many Python machine learning and AI libraries and packages available. If you\u2019re interested in this application of Python, our Deep Learning and Python Programming for AI with Microsoft Azure ExpertTrack can help you develop your skills in these areas. You can discover the uses of Python and deep learning while boosting your career in AI. Data analytics Much like AI and machine learning, data analytics is another rapidly developing field that utilises Python programming. At a time when we\u2019re creating more data than ever before, there is a need for those who can collect, manipulate and organise the information. Python for data science and analytics makes sense. The language is easy-to-learn, flexible, and well-supported, meaning it\u2019s relatively quick and easy to use for analysing data. When working with large amounts of information, it\u2019s useful for manipulating data and carrying out repetitive tasks. You can learn about data analytics using Python with our ExpertTrack, which will help you develop practical data analytics skills. Data visualisation Data visualisation is another popular and developing area of interest. Again, it plays into many of the strengths of Python. As well as its flexibility and the fact it\u2019s open-source, Python provides a variety of graphing libraries with all kinds of features. Whether you\u2019re looking to create a simple graphical representation or a more interactive plot, you can find a library to match your needs. Examples include Pandas Visualization and Plotly. The possibilities are vast, allowing you to transform data into meaningful insights. If data visualisation with Python sounds appealing, check out our 12-week ExpertTrack on the subject. You\u2019ll learn how to leverage Python libraries to interpret and analyse data sets. Programming applications You can program all kinds of applications using Python. The general-purpose language can be used to read and create file directories, create GUIs and APIs, and more. Whether it\u2019s blockchain applications, audio and video apps, or machine learning applications, you can build them all with Python. Web development Python is a great choice for web development. This is largely due to the fact that there are many Python web development frameworks to choose from, such as Django, Pyramid, and Flask. These frameworks have been used to create sites and services such as Spotify, Reddit and Mozilla. Thanks to the extensive libraries and modules that come with Python frameworks, functions such as database access, content management, and data authorisation are all possible and easily accessible. Given its versatility, it\u2019s hardly surprising that Python is so widely used in web development.","title":"Index"},{"location":"courses/python/#what-python-is","text":"","title":"What Python is"},{"location":"courses/python/#python-is-an-interpreted-programming-language","text":"This means you don't have to compile an entire program to see the results of your code as in many other languages like C++ which compiles all code and produces an executable file to run. On contraray yo that, Python executes statements individually (onr by one) and allows you check the results consequently. Python is an interpreted, object-oriented, high-level programming language with dynamic semantics. Its high-level built in data structures, combined with dynamic typing and dynamic binding, make it very attractive for Rapid Application Development, as well as for use as a scripting or glue language to connect existing components together. Python is an object-oriented (based around data), high-level (easier for humans to understand) programming language. First launched in 1992, it\u2019s built in a way that it\u2019s relatively intuitive to write and understand. As such, it\u2019s an ideal coding language for those who want rapid development.","title":"Python is an interpreted programming language"},{"location":"courses/python/#easy-to-learn","text":"Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance.","title":"Easy to Learn"},{"location":"courses/python/#rich-packges-repsitory","text":"Python supports modules and packages, which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without charge for all major platforms, and can be freely distributed.","title":"Rich Packges Repsitory"},{"location":"courses/python/#why-python","text":"If you\u2019re wondering who uses Python, you\u2019ll find that many of the biggest organisations in the world implement it in some form. NASA, Google, Netflix, Spotify, and countless more all use the language to help power their services. According to the TIOBE index, which measures the popularity of programming languages, Python is the third most popular programming language in the world, behind only Java and C. There are many reasons for the ubiquity of Python, including: Its ease of use. For those who are new to coding and programming, Python can be an excellent first step. It\u2019s relatively easy to learn, making it a great way to start building your programming knowledge. Its simple syntax. Python is relatively easy to read and understand, as its syntax is more like English. Its straightforward layout means that you can work out what each line of code is doing. Its thriving community. As it\u2019s an open-source language, anyone can use Python to code. What\u2019s more, there is a community that supports and develops the ecosystem, adding their own contributions and libraries. Its versatility. As we\u2019ll explore in more detail, there are many uses for Python. Whether you\u2019re interested in data visualisation, artificial intelligence or web development, you can find a use for the language. The most striking example is Python that took over the second position from Java. Why is Python so popular? According to the TIOBE index, which measures the popularity of programming languages, Python is the third most popular programming language in the world, behind only Java and C. There are many reasons for the ubiquity of Python, including: Its ease of use. For those who are new to coding and programming, Python can be an excellent first step. It\u2019s relatively easy to learn, making it a great way to start building your programming knowledge. Its simple syntax. Python is relatively easy to read and understand, as its syntax is more like English. Its straightforward layout means that you can work out what each line of code is doing. Its thriving community. As it\u2019s an open-source language, anyone can use Python to code. What\u2019s more, there is a community that supports and develops the ecosystem, adding their own contributions and libraries. Its versatility. As we\u2019ll explore in more detail, there are many uses for Python. Whether you\u2019re interested in data visualisation, artificial intelligence or web development, you can find a use for the language. Why learn Python? So, we know why Python is so popular at the moment, but why should you learn how to use it? Aside from the ease of use and versatility mentioned above, there are several good reasons to learn Python: Python developers are in demand. Across a wide range of fields, there is a demand for those with Python skills. If you\u2019re looking to start or change your career, it could be a vital skill to help you. It could lead to a well-paid career. Data suggests that the median annual salary for those with Python skills is around \u00a365,000 in the UK. There will be many job opportunities. Given that Python can be used in many emerging technologies, such as AI, machine learning, and data analytics, it\u2019s likely that it\u2019s a future-proof skill. Learning Python now could benefit you across your career. How long does it take to learn Python? As we\u2019ve mentioned already, Python is a relatively straightforward programming language compared to many others. As such, it\u2019s possible to learn the basics over just a few weeks. Many of our short courses, such as Getting Started with Python, take 6-8 weeks to complete, with only a few hours of learning required each week.","title":"Why Python"},{"location":"courses/python/#what-is-python-used-for","text":"Clearly, Python is a popular and in-demand skill to learn. But what is python programming used for? We\u2019ve already briefly touched on some of the areas it can be applied to, and we\u2019ve expanded on these and more Python examples below. Python can be used for: AI and machine learning Because Python is such a stable, flexible, and simple programming language, it\u2019s perfect for various machine learning (ML) and artificial intelligence (AI) projects. In fact, Python is among the favourite languages among data scientists, and there are many Python machine learning and AI libraries and packages available. If you\u2019re interested in this application of Python, our Deep Learning and Python Programming for AI with Microsoft Azure ExpertTrack can help you develop your skills in these areas. You can discover the uses of Python and deep learning while boosting your career in AI. Data analytics Much like AI and machine learning, data analytics is another rapidly developing field that utilises Python programming. At a time when we\u2019re creating more data than ever before, there is a need for those who can collect, manipulate and organise the information. Python for data science and analytics makes sense. The language is easy-to-learn, flexible, and well-supported, meaning it\u2019s relatively quick and easy to use for analysing data. When working with large amounts of information, it\u2019s useful for manipulating data and carrying out repetitive tasks. You can learn about data analytics using Python with our ExpertTrack, which will help you develop practical data analytics skills. Data visualisation Data visualisation is another popular and developing area of interest. Again, it plays into many of the strengths of Python. As well as its flexibility and the fact it\u2019s open-source, Python provides a variety of graphing libraries with all kinds of features. Whether you\u2019re looking to create a simple graphical representation or a more interactive plot, you can find a library to match your needs. Examples include Pandas Visualization and Plotly. The possibilities are vast, allowing you to transform data into meaningful insights. If data visualisation with Python sounds appealing, check out our 12-week ExpertTrack on the subject. You\u2019ll learn how to leverage Python libraries to interpret and analyse data sets. Programming applications You can program all kinds of applications using Python. The general-purpose language can be used to read and create file directories, create GUIs and APIs, and more. Whether it\u2019s blockchain applications, audio and video apps, or machine learning applications, you can build them all with Python. Web development Python is a great choice for web development. This is largely due to the fact that there are many Python web development frameworks to choose from, such as Django, Pyramid, and Flask. These frameworks have been used to create sites and services such as Spotify, Reddit and Mozilla. Thanks to the extensive libraries and modules that come with Python frameworks, functions such as database access, content management, and data authorisation are all possible and easily accessible. Given its versatility, it\u2019s hardly surprising that Python is so widely used in web development.","title":"What is Python used for?"},{"location":"courses/python/find-max/","text":"Finding Max list1, list2 = [555, 700, 100] , ['123', 'xyz', 'zeroBytes', 'abc'], print (\"Max int value is : \", max(list1) ) print (\"Max String value is : \", max(list2) ) Max int value is : 700 Max String value is : zeroBytes import array as arr # use 'i' for integer & 'd' for float/double/deciaml arr_int = arr.array('i', [1, 2, 3, 70, 2, 45, 12]) arr_float = arr.array('d', [1, 2.5, 3]) max = max(arr_float) max 3.0 max = arr_int[0] for i in range(1, len(arr_int)): if arr_int[i] > max: max = arr_int[i] max 70 mylist = [] s = 'append' d = 1 getattr(mylist, s)(d) mylist [1]","title":"Finding Max"},{"location":"courses/python/find-max/#finding-max","text":"list1, list2 = [555, 700, 100] , ['123', 'xyz', 'zeroBytes', 'abc'], print (\"Max int value is : \", max(list1) ) print (\"Max String value is : \", max(list2) ) Max int value is : 700 Max String value is : zeroBytes import array as arr # use 'i' for integer & 'd' for float/double/deciaml arr_int = arr.array('i', [1, 2, 3, 70, 2, 45, 12]) arr_float = arr.array('d', [1, 2.5, 3]) max = max(arr_float) max 3.0 max = arr_int[0] for i in range(1, len(arr_int)): if arr_int[i] > max: max = arr_int[i] max 70 mylist = [] s = 'append' d = 1 getattr(mylist, s)(d) mylist [1]","title":"Finding Max"},{"location":"courses/python/find-string/","text":"Finding a String mystring = \"Hello World\" print (mystring.count('ll')) 1 print (mystring.count('l')) 3 obviously, \"count\" method return the number of a search is found wihtin a string so far as we learned, let's solve a problem from HackerRank at https://www.hackerrank.com/challenges/find-a-string/problem at first, you may think that using \"count\" is a straight forward solution but soon you realize not to being true. #input ABCDCDC, CDC # output: 2 #trying count will return 1 print(\"ABCDCDC\".count('CDC')) 1 Note that we have \"CDC\" - starting position 2 - starting position 4 - these two results are interlaced. This is the problem - if they are totaly distinct from each other, the solution using 'count' would work perfectly # have a look at this print(\"ABCDCCDC\".count('CDC')) 2 #so here is the solution def count_substring(string, sub_string): count = 0 str_len = len(string) sub_len = len(sub_string) for x in range (str_len - sub_len + 1): scan_string = string[x:x+sub_len] if scan_string == sub_string: count+= 1 return count count_substring('ABCDCCDC','CDC') 2 commenting the solution - we iterate over the string moving 1 position at each cycle then compare - simply our iterating code would be (for x in range (str_len - sub_len + 1) and the results will still work fine but - note that last iterations wont match at all for all scan_string < sub_len - that is why, it is reveal your deep understanding to not enter these loos mystring =\"Hello World\" print( any(char.islower() for char in mystring)) True","title":"Finding a String"},{"location":"courses/python/find-string/#finding-a-string","text":"mystring = \"Hello World\" print (mystring.count('ll')) 1 print (mystring.count('l')) 3 obviously, \"count\" method return the number of a search is found wihtin a string so far as we learned, let's solve a problem from HackerRank at https://www.hackerrank.com/challenges/find-a-string/problem at first, you may think that using \"count\" is a straight forward solution but soon you realize not to being true. #input ABCDCDC, CDC # output: 2 #trying count will return 1 print(\"ABCDCDC\".count('CDC')) 1 Note that we have \"CDC\" - starting position 2 - starting position 4 - these two results are interlaced. This is the problem - if they are totaly distinct from each other, the solution using 'count' would work perfectly # have a look at this print(\"ABCDCCDC\".count('CDC')) 2 #so here is the solution def count_substring(string, sub_string): count = 0 str_len = len(string) sub_len = len(sub_string) for x in range (str_len - sub_len + 1): scan_string = string[x:x+sub_len] if scan_string == sub_string: count+= 1 return count count_substring('ABCDCCDC','CDC') 2 commenting the solution - we iterate over the string moving 1 position at each cycle then compare - simply our iterating code would be (for x in range (str_len - sub_len + 1) and the results will still work fine but - note that last iterations wont match at all for all scan_string < sub_len - that is why, it is reveal your deep understanding to not enter these loos mystring =\"Hello World\" print( any(char.islower() for char in mystring)) True","title":"Finding a String"},{"location":"courses/python/getattr-vs-eval/","text":"getattr vs eval you can't write object.x, because you don't know in advance which attribute you want (it comes from a string). Very useful for meta-programming. Objects in Python can have attributes -- data attributes and functions to work with those (methods). Actually, every object has built-in attributes. For example you have an object person, that has several attributes: name, gender, etc. You access these attributes (be it methods or data objects) usually writing: person.name, person.gender, person.the_method(), etc. But what if you don't know the attribute's name at the time you write the program? For example you have attribute's name stored in a variable called attr_name. if attr_name = 'gender' then, instead of writing gender = person.gender you can write gender = getattr(person, attr_name) class Person(): ... name = 'Victor' ... def say(self, what): ... print(self.name, what) ... >>> getattr(Person, 'name') 'Victor' >>> attr_name = 'name' >>> person = Person() >>> getattr(person, attr_name) 'Victor' >>> getattr(person, 'say')('Hello') Victor Hello File \"<ipython-input-1-c0033f5de77d>\", line 13 Victor Hello ^ SyntaxError: invalid syntax x= hash((1,2) x File \"<ipython-input-5-b45d1d86958e>\", line 2 x ^ SyntaxError: invalid syntax","title":"getattr vs eval"},{"location":"courses/python/getattr-vs-eval/#getattr-vs-eval","text":"you can't write object.x, because you don't know in advance which attribute you want (it comes from a string). Very useful for meta-programming. Objects in Python can have attributes -- data attributes and functions to work with those (methods). Actually, every object has built-in attributes. For example you have an object person, that has several attributes: name, gender, etc. You access these attributes (be it methods or data objects) usually writing: person.name, person.gender, person.the_method(), etc. But what if you don't know the attribute's name at the time you write the program? For example you have attribute's name stored in a variable called attr_name. if attr_name = 'gender' then, instead of writing gender = person.gender you can write gender = getattr(person, attr_name) class Person(): ... name = 'Victor' ... def say(self, what): ... print(self.name, what) ... >>> getattr(Person, 'name') 'Victor' >>> attr_name = 'name' >>> person = Person() >>> getattr(person, attr_name) 'Victor' >>> getattr(person, 'say')('Hello') Victor Hello File \"<ipython-input-1-c0033f5de77d>\", line 13 Victor Hello ^ SyntaxError: invalid syntax x= hash((1,2) x File \"<ipython-input-5-b45d1d86958e>\", line 2 x ^ SyntaxError: invalid syntax","title":"getattr vs eval"},{"location":"courses/python/list-comprehensions/","text":"List Comprehensions a, b, c, n = [int(input()) for _ in range(4)] 1 2 3 4 print ([[x,y,z] for x in range(a + 1) for y in range(b + 1) for z in range(c + 1) if x + y + z != n]) [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 3], [1, 2, 0], [1, 2, 2], [1, 2, 3]]","title":"List Comprehensions"},{"location":"courses/python/list-comprehensions/#list-comprehensions","text":"a, b, c, n = [int(input()) for _ in range(4)] 1 2 3 4 print ([[x,y,z] for x in range(a + 1) for y in range(b + 1) for z in range(c + 1) if x + y + z != n]) [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [0, 1, 1], [0, 1, 2], [0, 2, 0], [0, 2, 1], [0, 2, 3], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 3], [1, 2, 0], [1, 2, 2], [1, 2, 3]]","title":"List Comprehensions"},{"location":"courses/python/nested-lists/","text":"Nested Lists A nested list is a list that contains another list, in other words it is a list of lists. It is also referred to as a multi-diminsional array. nested_list = [['John', '50'], ['Mark', '40'], ['Ali', '24']] print (len(nested_list)) #note that lenght of this nested list is 3, since we have 3 inner lists within the outer one 3 print (nested_list[0]) ['John', '50'] print (nested_list[2][0]) Ali # Let's iterate over this nested lists for inner in nested_list: print (inner) ['John', '50'] ['Mark', '40'] ['Ali', '24'] # let's check value of inner so far inner ['Ali', '24'] # then let's iterate over all values within last nested list which is stored in the variable 'inner' at the moment for value in inner: print (value) Ali 24 # Now let's iterate over all values within last nested list which is stored in the variable 'inner' at the moment for inner in nested_list: for value in inner: print (value) John 50 Mark 40 Ali 24 Here we solve a solution for a problem from HackerRank at https://www.hackerrank.com/challenges/nested-list/problem the problem is an application on the use of nested list # Let's initiate a dictionary so, all names that share the same score can be listed under the same key score_dic = {} for _ in range(int(input())): name = input() score = float(input()) if score in score_dic: score_dic[score].append(name) else: score_dic[score] = [name] # We need to convert that dictionary to new list sorted on keys score_list = list(score_dic.items()) score_list.sort() next_min = score_list[1][1] # if we have mutltiple names then sort them alphabetically next_min.sort() # print the output by unzip the results using * print (*next_min, sep = \"\\n\")","title":"Nested Lists"},{"location":"courses/python/nested-lists/#nested-lists","text":"A nested list is a list that contains another list, in other words it is a list of lists. It is also referred to as a multi-diminsional array. nested_list = [['John', '50'], ['Mark', '40'], ['Ali', '24']] print (len(nested_list)) #note that lenght of this nested list is 3, since we have 3 inner lists within the outer one 3 print (nested_list[0]) ['John', '50'] print (nested_list[2][0]) Ali # Let's iterate over this nested lists for inner in nested_list: print (inner) ['John', '50'] ['Mark', '40'] ['Ali', '24'] # let's check value of inner so far inner ['Ali', '24'] # then let's iterate over all values within last nested list which is stored in the variable 'inner' at the moment for value in inner: print (value) Ali 24 # Now let's iterate over all values within last nested list which is stored in the variable 'inner' at the moment for inner in nested_list: for value in inner: print (value) John 50 Mark 40 Ali 24 Here we solve a solution for a problem from HackerRank at https://www.hackerrank.com/challenges/nested-list/problem the problem is an application on the use of nested list # Let's initiate a dictionary so, all names that share the same score can be listed under the same key score_dic = {} for _ in range(int(input())): name = input() score = float(input()) if score in score_dic: score_dic[score].append(name) else: score_dic[score] = [name] # We need to convert that dictionary to new list sorted on keys score_list = list(score_dic.items()) score_list.sort() next_min = score_list[1][1] # if we have mutltiple names then sort them alphabetically next_min.sort() # print the output by unzip the results using * print (*next_min, sep = \"\\n\")","title":"Nested Lists"},{"location":"courses/python/print/","text":"Print Function It is a common programming habit to start teaching any programming language with little code that allows you to salute the world, just to say \"Hello World!\" in your programming language flavour. print(\"Hello World!\") Hello World! Also, you may assign \"Hello World!\" to a variable then pass it to the print method my_string = \"Hello World!\" print(my_string) Hello World! print('hello, world!'.title()) Hello, World! Another solution is to assign each word to a variable then print both of them. Actually, this seems to be not visible but it is just for the sake of mastering how the method works. var1, var2 = 'Hello', 'World!' print (var1) print (var2) Hello World! but we need to align them together on the same line print (var1, var2, sep=' ') Hello World! Method Signature: - print(*values, sep=' ', end='\\n', file=sys.stdout) - print(value1, value2, value3, sep=' ', end='\\n', file=sys.stdout) where: - sep is the delimiter between values. - end is what to be printed after values. - file is the output stream. Now, let us solve a problem from HackerRank https://www.hackerrank.com/challenges/python-print/problem n = int(input()) for x in range(1, n+1): print (x, end='') 7 1234567 Note since the required solution expect results to be adjacent to each other, we set the 'end' parameter to '' instead of its defulat value '\\n' which force a new line","title":"Print Method"},{"location":"courses/python/print/#print-function","text":"It is a common programming habit to start teaching any programming language with little code that allows you to salute the world, just to say \"Hello World!\" in your programming language flavour. print(\"Hello World!\") Hello World! Also, you may assign \"Hello World!\" to a variable then pass it to the print method my_string = \"Hello World!\" print(my_string) Hello World! print('hello, world!'.title()) Hello, World! Another solution is to assign each word to a variable then print both of them. Actually, this seems to be not visible but it is just for the sake of mastering how the method works. var1, var2 = 'Hello', 'World!' print (var1) print (var2) Hello World! but we need to align them together on the same line print (var1, var2, sep=' ') Hello World! Method Signature: - print(*values, sep=' ', end='\\n', file=sys.stdout) - print(value1, value2, value3, sep=' ', end='\\n', file=sys.stdout) where: - sep is the delimiter between values. - end is what to be printed after values. - file is the output stream. Now, let us solve a problem from HackerRank https://www.hackerrank.com/challenges/python-print/problem n = int(input()) for x in range(1, n+1): print (x, end='') 7 1234567 Note since the required solution expect results to be adjacent to each other, we set the 'end' parameter to '' instead of its defulat value '\\n' which force a new line","title":"Print Function"},{"location":"courses/python/read%20input/","text":"How to Read an Input # we expect a string x = input() x Mohamed Ali 'Mohamed Ali' # we still expect a string x = input() x 12 '12' # we expect an integer x = int(input()) x 12 12 # we still expect an integer x = int(input()) x 12.0 --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-4-bcb160fc4d9d> in <module> 1 # we still expect an integer ----> 2 x = int(input()) 3 x ValueError: invalid literal for int() with base 10: '12.0' # we expect a float/decimal/double x = float (input()) x 12.0 12.0 # we still expect a float/decimal/double x = float (input()) x 12 12.0 # read multiple entries at once a, b, c, d = [int(input()) for _ in range(4)] 1 2 3 4 a 1 b 2 c 3 d 4 # read multiple entries at once v = [int(input()) for _ in range(4)] 1 2 3 4 v [1, 2, 3, 4] arr = map(int, input().split()) 1 2 3 4 list(arr) [1, 2, 3, 4]","title":"Read Input"},{"location":"courses/python/read%20input/#how-to-read-an-input","text":"# we expect a string x = input() x Mohamed Ali 'Mohamed Ali' # we still expect a string x = input() x 12 '12' # we expect an integer x = int(input()) x 12 12 # we still expect an integer x = int(input()) x 12.0 --------------------------------------------------------------------------- ValueError Traceback (most recent call last) <ipython-input-4-bcb160fc4d9d> in <module> 1 # we still expect an integer ----> 2 x = int(input()) 3 x ValueError: invalid literal for int() with base 10: '12.0' # we expect a float/decimal/double x = float (input()) x 12.0 12.0 # we still expect a float/decimal/double x = float (input()) x 12 12.0 # read multiple entries at once a, b, c, d = [int(input()) for _ in range(4)] 1 2 3 4 a 1 b 2 c 3 d 4 # read multiple entries at once v = [int(input()) for _ in range(4)] 1 2 3 4 v [1, 2, 3, 4] arr = map(int, input().split()) 1 2 3 4 list(arr) [1, 2, 3, 4]","title":"How to Read an Input"},{"location":"courses/python/strings/","text":"Strings in Python mystring = \"Hello World\" print (mystring) Hello World #Strings in Python are arrays of bytes(charachters), the same it is presented in many programming languages like C++ & Java for char in mystring: print(char) H e l l o W o r l d #each charachter has its array index print (mystring[0]) H print (mystring[-1]) d # get you string lenght inclus=ding spaces print(len(mystring)) 11 # check substring within the main string if \"Wo\" in mystring: print (\"Found\") else: print (\"Not Found\") Found # note that although \"Wo\" is exist, \"wo\" is not. search is case senstive # check substring within the main string if \"wo\" in mystring: print (\"Found\") else: print (\"Not Found\") Not Found #even more you can slice a string print (mystring[1:3]) el # print last 5 charachters print (mystring[-5:]) World # a very common task to do with strings is to change its state amonge Upper-case & Lower-case print(mystring.upper()) HELLO WORLD print(mystring.lower()) hello world # the \"strip\" method works as \"trim\" in other languages. mystring = \" My Name is Mohamed Ali \" print (len(mystring), len(mystring.strip())) #note that we have one leading space and another tail one at the end, so we have two in total to strip 24 22 # It removes white spaces from the begining and the end but NOT WITHIN a string # if you intentionally needs to remove all within spaces that would be using join and split as following: print ((\"\".join(mystring.split()))) HelloWorld #or simply by replacing each space with null-space as folloing: print(mystring.replace(\" \", \"\")) HelloWorld Now let's solve a problem from Hackerrank at https://www.hackerrank.com/challenges/swap-case/problem def swap_case(s): new_string = '' for char in s: if char.isupper(): newchar = char.lower() else: newchar = char.upper() new_string += newchar return new_string #also we may use \"swapcase\" function which is exactly a staright forward solution # the solution in return would appear as concise as a \"one line return statment\" def swap_case(s): return s.swapcase() swap_case(\"Hwllo World\") 'hWLLO wORLD' Another problem from hackerRank to solve at https://www.hackerrank.com/challenges/python-string-split-and-join/problem def split_and_join(line): # write your code here return \"-\".join(line.split()) #to concatenate two strings simply use \"+\" first_name = \"Mohamed\" last_name = \"Ali\" print (\"My name is: \" + first_name + ' ' + last_name ) My name is: Mohamed Ali a similar problem from HackerRank at https://www.hackerrank.com/challenges/whats-your-name/problem def print_full_name(first, last): # Write your code here print (\"Hello \" + first + ' ' + last + '! You just delved into python.') #another solution using format would appear as folloing: #where each \"%s\" refers to a varible of string that comes after \"%\" consequently def print_full_name(first, last): # Write your code here print(\"Hello %s %s! You just delved into python.\" % (first,last)) print_full_name (\"Mohamed\", \"Ali\") Hello Mohamed Ali! You just delved into python. also, a problem from HackerRank at https://www.hackerrank.com/challenges/python-mutations/problem here the solution def mutate_string(string, position, character): string_list = list(string) string_list[position] = character return ''.join(string_list) Note that: - strings are immutable, you can not change it. Trying mystring[1] = 'M' will trigger an error - we can convert any string to new list (mutable case) where we can modify as we want - Finally, we can revert this list to its inital string state using 'join' function #string slice can also introduce a solution to mentioned problem as folloing def mutate_string(string, position, character): return string[:position]+ character + string[position+1:] mutate_string ('Hello world', 6, \"W\") #here we mutated the lower-case 'w' with upper-case one 'Hello World'","title":"Strings in Python"},{"location":"courses/python/strings/#strings-in-python","text":"mystring = \"Hello World\" print (mystring) Hello World #Strings in Python are arrays of bytes(charachters), the same it is presented in many programming languages like C++ & Java for char in mystring: print(char) H e l l o W o r l d #each charachter has its array index print (mystring[0]) H print (mystring[-1]) d # get you string lenght inclus=ding spaces print(len(mystring)) 11 # check substring within the main string if \"Wo\" in mystring: print (\"Found\") else: print (\"Not Found\") Found # note that although \"Wo\" is exist, \"wo\" is not. search is case senstive # check substring within the main string if \"wo\" in mystring: print (\"Found\") else: print (\"Not Found\") Not Found #even more you can slice a string print (mystring[1:3]) el # print last 5 charachters print (mystring[-5:]) World # a very common task to do with strings is to change its state amonge Upper-case & Lower-case print(mystring.upper()) HELLO WORLD print(mystring.lower()) hello world # the \"strip\" method works as \"trim\" in other languages. mystring = \" My Name is Mohamed Ali \" print (len(mystring), len(mystring.strip())) #note that we have one leading space and another tail one at the end, so we have two in total to strip 24 22 # It removes white spaces from the begining and the end but NOT WITHIN a string # if you intentionally needs to remove all within spaces that would be using join and split as following: print ((\"\".join(mystring.split()))) HelloWorld #or simply by replacing each space with null-space as folloing: print(mystring.replace(\" \", \"\")) HelloWorld Now let's solve a problem from Hackerrank at https://www.hackerrank.com/challenges/swap-case/problem def swap_case(s): new_string = '' for char in s: if char.isupper(): newchar = char.lower() else: newchar = char.upper() new_string += newchar return new_string #also we may use \"swapcase\" function which is exactly a staright forward solution # the solution in return would appear as concise as a \"one line return statment\" def swap_case(s): return s.swapcase() swap_case(\"Hwllo World\") 'hWLLO wORLD' Another problem from hackerRank to solve at https://www.hackerrank.com/challenges/python-string-split-and-join/problem def split_and_join(line): # write your code here return \"-\".join(line.split()) #to concatenate two strings simply use \"+\" first_name = \"Mohamed\" last_name = \"Ali\" print (\"My name is: \" + first_name + ' ' + last_name ) My name is: Mohamed Ali a similar problem from HackerRank at https://www.hackerrank.com/challenges/whats-your-name/problem def print_full_name(first, last): # Write your code here print (\"Hello \" + first + ' ' + last + '! You just delved into python.') #another solution using format would appear as folloing: #where each \"%s\" refers to a varible of string that comes after \"%\" consequently def print_full_name(first, last): # Write your code here print(\"Hello %s %s! You just delved into python.\" % (first,last)) print_full_name (\"Mohamed\", \"Ali\") Hello Mohamed Ali! You just delved into python. also, a problem from HackerRank at https://www.hackerrank.com/challenges/python-mutations/problem here the solution def mutate_string(string, position, character): string_list = list(string) string_list[position] = character return ''.join(string_list) Note that: - strings are immutable, you can not change it. Trying mystring[1] = 'M' will trigger an error - we can convert any string to new list (mutable case) where we can modify as we want - Finally, we can revert this list to its inital string state using 'join' function #string slice can also introduce a solution to mentioned problem as folloing def mutate_string(string, position, character): return string[:position]+ character + string[position+1:] mutate_string ('Hello world', 6, \"W\") #here we mutated the lower-case 'w' with upper-case one 'Hello World'","title":"Strings in Python"},{"location":"courses/python/sudoku-solver/","text":"How to Solve Sudoku in Python myboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]] def solveSudoku(board) -> None: \"\"\" Do not return anything, modify board in-place instead. \"\"\" h = 1 all = 0 old_all = 0 con = True while (con): columns = list(zip(*board)) box = [[] for _ in range(9)] two = [] for x in range(9): for y in range (9): num = board[x][y] if num != '.' : idx = (x // 3) * 3 + y // 3 box[idx].append(num) for x in range(9): for y in range (9): num = board[x][y] if num == '.' or type(num) == list: mylist = [] row = board[x] col = columns[y] idx = (x // 3) * 3 + (y // 3) #print (num, x, y) for n in range(9): str_n = str(n+1) if str_n not in col and str_n not in row and str_n not in box[idx]: mylist.append(str_n) board[x][y] = mylist old_all = all for x in range(9): for y in range (9): num = board[x][y] if type(num) == list: if (len(num) == 1): board[x][y] = num[0] all += 1 elif (len(num) == 2): two = num pos = [] pos.append(x) pos.append(y) if all == old_all: if len(two) == 2: print(pos, two) board[pos[0]][pos[1]] = two[0] else: con = False for g in range(9): print(g+1, board[g]) print (h, all) h+= 1 return board myboard = [[\".\",\".\",\"9\",\"7\",\"4\",\"8\",\".\",\".\",\".\"],[\"7\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"2\",\".\",\"1\",\".\",\"9\",\".\",\".\",\".\"],[\".\",\".\",\"7\",\".\",\".\",\".\",\"2\",\"4\",\".\"],[\".\",\"6\",\"4\",\".\",\"1\",\".\",\"5\",\"9\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\"3\",\".\",\".\"],[\".\",\".\",\".\",\"8\",\".\",\"3\",\".\",\"2\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"6\"],[\".\",\".\",\".\",\"2\",\"7\",\"5\",\"9\",\".\",\".\"]] #myboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] solveSudoku(myboard) 1 3 2 7 3 10 4 17 5 19 6 20 [8, 8] ['3', '4'] 7 20 [8, 7] ['1', '8'] 8 20 9 21 [8, 1] ['4', '8'] 10 21 11 22 [7, 6] ['7', '8'] 12 22 13 23 14 24 15 29 16 31 [7, 1] ['3', '5'] 17 31 18 33 19 36 20 40 21 42 [2, 4] ['3', '5'] 22 42 23 44 24 47 25 48 1 ['6', '1', '9', '7', '4', '8', '6', '5', '2'] 2 ['7', '8', '3', '6', '5', '2', '1', '3', '9'] 3 ['6', '2', '5', '1', '3', '9', '8', '7', '4'] 4 ['3', '5', '7', '9', '8', '6', '2', '4', '1'] 5 ['2', '6', '4', '3', '1', '7', '5', '9', '8'] 6 ['1', '9', '8', '5', '2', '4', '3', '6', '7'] 7 ['9', '7', '1', '8', '6', '3', '4', '2', '5'] 8 ['5', '3', '2', '4', '9', '1', '7', '8', '6'] 9 ['8', '4', '6', '2', '7', '5', '9', '1', '3'] 26 48 [['6', '1', '9', '7', '4', '8', '6', '5', '2'], ['7', '8', '3', '6', '5', '2', '1', '3', '9'], ['6', '2', '5', '1', '3', '9', '8', '7', '4'], ['3', '5', '7', '9', '8', '6', '2', '4', '1'], ['2', '6', '4', '3', '1', '7', '5', '9', '8'], ['1', '9', '8', '5', '2', '4', '3', '6', '7'], ['9', '7', '1', '8', '6', '3', '4', '2', '5'], ['5', '3', '2', '4', '9', '1', '7', '8', '6'], ['8', '4', '6', '2', '7', '5', '9', '1', '3']] [[[\"3\",\"5\",\"6\"],[\"1\",\"3\",\"5\"],\"9\",\"7\",\"4\",\"8\",[\"1\",\"6\"],[\"1\",\"3\",\"5\"],[\"2\",\"3\",\"5\"]],[\"7\",[\"1\",\"3\",\"4\",\"5\",\"8\"],[\"1\",\"3\",\"5\"],\"6\",[\"3\",\"5\"],\"2\",[\"1\",\"4\",\"8\"],[\"1\",\"3\",\"5\",\"8\"],[\"3\",\"4\",\"5\",\"9\"]],[[\"3\",\"4\",\"5\",\"6\",\"8\"],\"2\",[\"3\",\"5\",\"6\"],\"1\",[\"3\",\"5\"],\"9\",[\"4\",\"6\",\"7\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],[\"3\",\"4\",\"5\"]],[[\"3\",\"5\"],[\"3\",\"5\"],\"7\",\"9\",\"8\",\"6\",\"2\",\"4\",\"1\"],[\"2\",\"6\",\"4\",\"3\",\"1\",\"7\",\"5\",\"9\",\"8\"],[\"1\",\"9\",\"8\",\"5\",\"2\",\"4\",\"3\",\"6\",\"7\"],[[\"4\",\"5\",\"9\"],[\"1\",\"4\",\"5\",\"7\"],[\"1\",\"5\"],\"8\",\"6\",\"3\",[\"1\",\"4\",\"7\"],\"2\",[\"4\",\"5\"]],[[\"3\",\"5\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],[\"2\",\"3\",\"5\"],\"4\",\"9\",\"1\",[\"7\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],\"6\"],[[\"3\",\"4\",\"6\",\"8\"],[\"1\",\"3\",\"4\",\"8\"],[\"1\",\"3\",\"6\"],\"2\",\"7\",\"5\",\"9\",[\"1\",\"3\",\"8\"],[\"3\",\"4\"]]]","title":"How to Solve Sudoku in Python"},{"location":"courses/python/sudoku-solver/#how-to-solve-sudoku-in-python","text":"myboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]] def solveSudoku(board) -> None: \"\"\" Do not return anything, modify board in-place instead. \"\"\" h = 1 all = 0 old_all = 0 con = True while (con): columns = list(zip(*board)) box = [[] for _ in range(9)] two = [] for x in range(9): for y in range (9): num = board[x][y] if num != '.' : idx = (x // 3) * 3 + y // 3 box[idx].append(num) for x in range(9): for y in range (9): num = board[x][y] if num == '.' or type(num) == list: mylist = [] row = board[x] col = columns[y] idx = (x // 3) * 3 + (y // 3) #print (num, x, y) for n in range(9): str_n = str(n+1) if str_n not in col and str_n not in row and str_n not in box[idx]: mylist.append(str_n) board[x][y] = mylist old_all = all for x in range(9): for y in range (9): num = board[x][y] if type(num) == list: if (len(num) == 1): board[x][y] = num[0] all += 1 elif (len(num) == 2): two = num pos = [] pos.append(x) pos.append(y) if all == old_all: if len(two) == 2: print(pos, two) board[pos[0]][pos[1]] = two[0] else: con = False for g in range(9): print(g+1, board[g]) print (h, all) h+= 1 return board myboard = [[\".\",\".\",\"9\",\"7\",\"4\",\"8\",\".\",\".\",\".\"],[\"7\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"2\",\".\",\"1\",\".\",\"9\",\".\",\".\",\".\"],[\".\",\".\",\"7\",\".\",\".\",\".\",\"2\",\"4\",\".\"],[\".\",\"6\",\"4\",\".\",\"1\",\".\",\"5\",\"9\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\"3\",\".\",\".\"],[\".\",\".\",\".\",\"8\",\".\",\"3\",\".\",\"2\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"6\"],[\".\",\".\",\".\",\"2\",\"7\",\"5\",\"9\",\".\",\".\"]] #myboard = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]] solveSudoku(myboard) 1 3 2 7 3 10 4 17 5 19 6 20 [8, 8] ['3', '4'] 7 20 [8, 7] ['1', '8'] 8 20 9 21 [8, 1] ['4', '8'] 10 21 11 22 [7, 6] ['7', '8'] 12 22 13 23 14 24 15 29 16 31 [7, 1] ['3', '5'] 17 31 18 33 19 36 20 40 21 42 [2, 4] ['3', '5'] 22 42 23 44 24 47 25 48 1 ['6', '1', '9', '7', '4', '8', '6', '5', '2'] 2 ['7', '8', '3', '6', '5', '2', '1', '3', '9'] 3 ['6', '2', '5', '1', '3', '9', '8', '7', '4'] 4 ['3', '5', '7', '9', '8', '6', '2', '4', '1'] 5 ['2', '6', '4', '3', '1', '7', '5', '9', '8'] 6 ['1', '9', '8', '5', '2', '4', '3', '6', '7'] 7 ['9', '7', '1', '8', '6', '3', '4', '2', '5'] 8 ['5', '3', '2', '4', '9', '1', '7', '8', '6'] 9 ['8', '4', '6', '2', '7', '5', '9', '1', '3'] 26 48 [['6', '1', '9', '7', '4', '8', '6', '5', '2'], ['7', '8', '3', '6', '5', '2', '1', '3', '9'], ['6', '2', '5', '1', '3', '9', '8', '7', '4'], ['3', '5', '7', '9', '8', '6', '2', '4', '1'], ['2', '6', '4', '3', '1', '7', '5', '9', '8'], ['1', '9', '8', '5', '2', '4', '3', '6', '7'], ['9', '7', '1', '8', '6', '3', '4', '2', '5'], ['5', '3', '2', '4', '9', '1', '7', '8', '6'], ['8', '4', '6', '2', '7', '5', '9', '1', '3']] [[[\"3\",\"5\",\"6\"],[\"1\",\"3\",\"5\"],\"9\",\"7\",\"4\",\"8\",[\"1\",\"6\"],[\"1\",\"3\",\"5\"],[\"2\",\"3\",\"5\"]],[\"7\",[\"1\",\"3\",\"4\",\"5\",\"8\"],[\"1\",\"3\",\"5\"],\"6\",[\"3\",\"5\"],\"2\",[\"1\",\"4\",\"8\"],[\"1\",\"3\",\"5\",\"8\"],[\"3\",\"4\",\"5\",\"9\"]],[[\"3\",\"4\",\"5\",\"6\",\"8\"],\"2\",[\"3\",\"5\",\"6\"],\"1\",[\"3\",\"5\"],\"9\",[\"4\",\"6\",\"7\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],[\"3\",\"4\",\"5\"]],[[\"3\",\"5\"],[\"3\",\"5\"],\"7\",\"9\",\"8\",\"6\",\"2\",\"4\",\"1\"],[\"2\",\"6\",\"4\",\"3\",\"1\",\"7\",\"5\",\"9\",\"8\"],[\"1\",\"9\",\"8\",\"5\",\"2\",\"4\",\"3\",\"6\",\"7\"],[[\"4\",\"5\",\"9\"],[\"1\",\"4\",\"5\",\"7\"],[\"1\",\"5\"],\"8\",\"6\",\"3\",[\"1\",\"4\",\"7\"],\"2\",[\"4\",\"5\"]],[[\"3\",\"5\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],[\"2\",\"3\",\"5\"],\"4\",\"9\",\"1\",[\"7\",\"8\"],[\"3\",\"5\",\"7\",\"8\"],\"6\"],[[\"3\",\"4\",\"6\",\"8\"],[\"1\",\"3\",\"4\",\"8\"],[\"1\",\"3\",\"6\"],\"2\",\"7\",\"5\",\"9\",[\"1\",\"3\",\"8\"],[\"3\",\"4\"]]]","title":"How to Solve Sudoku in Python"},{"location":"courses/python/validate-sudoku/","text":"How to Validate Sudoku Squares in Python Here, we are going to solve a probem from LeetCode at https://leetcode.com/problems/valid-sudoku/ myboard = [[\".\",\".\",\".\",\".\",\"5\",\".\",\".\",\"1\",\".\"], [\".\",\"4\",\".\",\"3\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\".\",\".\",\".\",\"3\",\".\",\".\",\"1\"], [\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\"2\",\".\"], [\".\",\".\",\"2\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\".\",\"1\",\"5\",\".\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\"], [\".\",\"2\",\".\",\"9\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\"4\",\".\",\".\",\".\",\".\",\".\",\".\"]] def isValidSudoku(board) -> bool: for x in range(9): my_list=[] for y in range (9): num = board[x][y] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False for x in range(9): my_list=[] for y in range (9): num = board[y][x] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False for row_start in range (0,9,3): for col_start in range (0,9,3): my_list=[] for x in range(row_start, row_start+3): for y in range (col_start, col_start+3): num = board[y][x] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False return True isValidSudoku(myboard) False Algorithm Analysis - Lines 3-11: we iterate over all rows to check if there are any duplicates numbers in any row - Lines 13-21: we iterate over all columns to check if there are any duplicates numbers in any column - Lines 24-35: we iterate over all 3x3 boxes to check if there are any duplicates numbers in any 3x3 box What you may learn from that solution: - use isnumeric() method to check if a string is valid number or not (lines 7, 17, 31) - use append method to add value to the end of list - use (if, in) to check if value exist in a list i.e (if num in my_list) - use (not) to negate the condition i.e ( (if num not in my_list) Range Parameters: - start : (Optional) An integer to start counting from, defaults to 0. - stop : An integer to stop the count at. - step : (Optional) An integer that indicates the incremental value from start parameter value, defaults to 1. for n in range (0,9,3): print (n, end=' ') 0 3 6 Another solution using Bitmasking we can use values at different positions of an array to mark whether the number corresponding to each position has been seen or not. Each position in the array can take a value of 0 or 1, which can be represented by a single bit. This will resul in improving the space complexity. We can use a binary number with 9 digits to represent whether numbers 1 through 9 have been visited or not. def isValidSudoku(board) -> bool: N = 9 # Use binary number to check previous occurrence rows = [0] * N cols = [0] * N boxes = [0] * N for r in range(N): for c in range(N): # Check if the position is filled with number if board[r][c] == \".\": continue pos = int(board[r][c]) - 1 # Check the row if rows[r] & (1 << pos): return False rows[r] |= (1 << pos) # Check the column if cols[c] & (1 << pos): return False cols[c] |= (1 << pos) # Check the box idx = (r // 3) * 3 + c // 3 if boxes[idx] & (1 << pos): return False boxes[idx] |= (1 << pos) return True isValidSudoku(myboard) False","title":"How to Validate Sudoku Squares in Python"},{"location":"courses/python/validate-sudoku/#how-to-validate-sudoku-squares-in-python","text":"Here, we are going to solve a probem from LeetCode at https://leetcode.com/problems/valid-sudoku/ myboard = [[\".\",\".\",\".\",\".\",\"5\",\".\",\".\",\"1\",\".\"], [\".\",\"4\",\".\",\"3\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\".\",\".\",\".\",\"3\",\".\",\".\",\"1\"], [\"8\",\".\",\".\",\".\",\".\",\".\",\".\",\"2\",\".\"], [\".\",\".\",\"2\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\".\",\"1\",\"5\",\".\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\"], [\".\",\"2\",\".\",\"9\",\".\",\".\",\".\",\".\",\".\"], [\".\",\".\",\"4\",\".\",\".\",\".\",\".\",\".\",\".\"]] def isValidSudoku(board) -> bool: for x in range(9): my_list=[] for y in range (9): num = board[x][y] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False for x in range(9): my_list=[] for y in range (9): num = board[y][x] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False for row_start in range (0,9,3): for col_start in range (0,9,3): my_list=[] for x in range(row_start, row_start+3): for y in range (col_start, col_start+3): num = board[y][x] if num.isnumeric(): if num not in my_list: my_list.append(num) else: return False return True isValidSudoku(myboard) False Algorithm Analysis - Lines 3-11: we iterate over all rows to check if there are any duplicates numbers in any row - Lines 13-21: we iterate over all columns to check if there are any duplicates numbers in any column - Lines 24-35: we iterate over all 3x3 boxes to check if there are any duplicates numbers in any 3x3 box What you may learn from that solution: - use isnumeric() method to check if a string is valid number or not (lines 7, 17, 31) - use append method to add value to the end of list - use (if, in) to check if value exist in a list i.e (if num in my_list) - use (not) to negate the condition i.e ( (if num not in my_list) Range Parameters: - start : (Optional) An integer to start counting from, defaults to 0. - stop : An integer to stop the count at. - step : (Optional) An integer that indicates the incremental value from start parameter value, defaults to 1. for n in range (0,9,3): print (n, end=' ') 0 3 6","title":"How to Validate Sudoku Squares in Python"},{"location":"courses/python/validate-sudoku/#another-solution-using-bitmasking","text":"we can use values at different positions of an array to mark whether the number corresponding to each position has been seen or not. Each position in the array can take a value of 0 or 1, which can be represented by a single bit. This will resul in improving the space complexity. We can use a binary number with 9 digits to represent whether numbers 1 through 9 have been visited or not. def isValidSudoku(board) -> bool: N = 9 # Use binary number to check previous occurrence rows = [0] * N cols = [0] * N boxes = [0] * N for r in range(N): for c in range(N): # Check if the position is filled with number if board[r][c] == \".\": continue pos = int(board[r][c]) - 1 # Check the row if rows[r] & (1 << pos): return False rows[r] |= (1 << pos) # Check the column if cols[c] & (1 << pos): return False cols[c] |= (1 << pos) # Check the box idx = (r // 3) * 3 + c // 3 if boxes[idx] & (1 << pos): return False boxes[idx] |= (1 << pos) return True isValidSudoku(myboard) False","title":"Another solution using Bitmasking"},{"location":"ml/","text":"ML Bytes DenMune Clustering Algorithm ReadMe Documentation GitHub","title":"Machine"},{"location":"ml/#ml-bytes","text":"DenMune Clustering Algorithm ReadMe Documentation GitHub","title":"ML Bytes"},{"location":"ml/denmune/","text":"DenMune: A density-peak clustering algorithm DenMune: A density-peak clustering algorithm DenMune a clustering algorithm that can find clusters of arbitrary size, shapes and densities in two-dimensions. Higher dimensions are first reduced to 2-D using the t-sne. The algorithm relies on a single parameter K (the number of nearest neighbors). The results show the superiority of the algorithm. Enjoy the simplicity but the power of DenMune. Scientific Work Paper Journal Data Coding & Maintenance Git Repo Code Style Installation CI Workflow Code Coverage Docs & Tutorials Read the Docs Repo2Docker Colab kaggle ReviewNB Downloads Stats downloads/day download/week download/month Suggestions & Reporting Issues Github Gitter Slack Based on the paper Paper Mohamed Abbas, Adel El-Zoghabi, Amin Shoukry, DenMune: Density peak based clustering using mutual nearest neighbors In: Journal of Pattern Recognition, Elsevier, volume 109, number 107589, January 2021 DOI: https://doi.org/10.1016/j.patcog.2020.107589 Documentation: Documentation, including tutorials, are available on https://denmune.readthedocs.io [![read the documentation](https://img.shields.io/badge/read_the-docs-orange)](https://denmune.readthedocs.io/en/latest/?badge=latest) Watch it in action This 30 seconds will tell you how a density-based algorithm, DenMune propagates: When less means more Most calssic clustering algorithms fail in detecting complex clusters where clusters are of different size, shape, density, and being exist in noisy data. Recently, a density-based algorithm named DenMune showed great ability in detecting complex shapes even in noisy data. it can detect number of clusters automatically, detect both pre-identified-noise and post-identified-noise automatically and removing them. It can achieve accuracy reach 100% in some classic pattern problems, achieve 97% in MNIST dataset. A great advantage of this algorithm is being single-parameter algorithm. All you need is to set number of k-nearest neighbor and the algorithm will care about the rest. Being Non-sensitive to changes in k, make it robust and stable. Keep in mind, the algorithm reduce any N-D dataset to only 2-D dataset initially, so it is a good benefit of this algorithm is being always to plot your data and explore it which make this algorithm a good candidate for data exploration. Finally, the algorithm comes with neat package for visualizing data, validating it and analyze the whole clustering process. How to install DenMune Simply install DenMune clustering algorithm using pip command from the official Python repository From the shell run the command shell pip install denmune From Jupyter notebook cell run the command ipython3 !pip install denmune How to use DenMune Once DenMune is installed, you just need to import it python from denmune import DenMune ###### Please note that first denmune (the package) in small letters, while the other one(the class itself) has D and M in capital case. Read data There are four possible cases of data: - only train data without labels - only labeled train data - labeled train data in addition to test data without labels - labeled train data in addition to labeled test data ```python #============================================= # First scenario: train data without labels # ============================================ data_path = 'datasets/denmune/chameleon/' dataset = \"t7.10k.csv\" data_file = data_path + dataset # train data without labels X_train = pd.read_csv(data_file, sep=',', header=None) knn = 39 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=True) ``` This is an intuitive dataset which has no groundtruth provided ```python #============================================= # Second scenario: train data with labels # ============================================ data_path = 'datasets/denmune/shapes/' dataset = \"aggregation.csv\" data_file = data_path + dataset # train data with labels X_train = pd.read_csv(data_file, sep=',', header=None) y_train = X_train.iloc[:, -1] X_train = X_train.drop(X_train.columns[-1], axis=1) knn = 6 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, train_truth= y_train, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=True) ``` Datset groundtruth Dataset as detected by DenMune at k=6 ```python #================================================================= # Third scenario: train data with labels in addition to test data # ================================================================ data_path = 'datasets/denmune/pendigits/' file_2d = data_path + 'pendigits-2d.csv' # train data with labels X_train = pd.read_csv(data_path + 'train.csv', sep=',', header=None) y_train = X_train.iloc[:, -1] X_train = X_train.drop(X_train.columns[-1], axis=1) # test data without labels X_test = pd.read_csv(data_path + 'test.csv', sep=',', header=None) X_test = X_test.drop(X_test.columns[-1], axis=1) knn = 50 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, train_truth= y_train, test_data= X_test, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=True, show_noise=True) ``` dataset groundtruth dataset as detected by DenMune at k=50 test data as predicted by DenMune on training the dataset at k=50 Algorithm's Parameters Parameters used within the initialization of the DenMune class python def __init__ (self, train_data=None, test_data=None, train_truth=None, test_truth=None, file_2d =None, k_nearest=None, rgn_tsne=False, prop_step=0, ): train_data: data used for training the algorithm default: None. It should be provided by the use, otherwise an error will raise. train_truth: labels of training data default: None test_data: data used for testing the algorithm test_truth: labels of testing data default: None k_nearest: number of nearest neighbor default: 0. the default is invalid. k-nearest neighbor should be at least 1. rgn_tsn: when set to True: It will regenerate the reduced 2-D version of the N-D dataset each time the algorithm run. when set to False: It will generate the reduced 2-D version of the N-D dataset first time only, then will reuse the saved exist file default: True file_2d: name (include location) of file used save/load the reduced 2-d version if empty: the algorithm will create temporary file named '_temp_2d' default: None prop_step: size of increment used in showing the clustering propagation. leave this parameter set to 0, the default value, unless you are willing intentionally to enter the propagation mode. default: 0 Parameters used within the fit_predict function: python def fit_predict(self, validate=True, show_plots=True, show_noise=True, show_analyzer=True ): validate: validate data on/off according to five measures integrated with DenMune (Accuracy. F1-score, NMI index, AMI index, ARI index) default: True show_plots: show/hide plotting of data default: True show_noise: show/hide noise and outlier default: True show_analyzer: show/hide the analyzer default: True The Analyzer The algorithm provide an exploratory tool called analyzer, once called it will provide you with in-depth analysis on how your clustering results perform. Noise Detection DenMune detects noise and outlier automatically, no need to any further work from your side. It plots pre-identified noise in black It plots post-identified noise in light grey You can set show_noise parameter to False. ```python # let us show noise m = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_noise=True) ``` ```python # let us show clean data by removing noise m = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_noise=False) ``` noisy data clean data Validatation You can get your validation results using 3 methods by showing the Analyzer extract values from the validity returned list from fit_predict function extract values from the Analyzer dictionary - There are five validity measures built-in the algorithm, which are: ACC, Accuracy F1 score NMI index (Normalized Mutual Information) AMI index (Adjusted Mutual Information) ARI index (Adjusted Rand Index) K-nearest Evolution The following chart shows the evolution of pre and post identified noise in correspondence to increase of number of knn. Also, detected number of clusters is analyzed in the same chart in relation with both types of identified noise. The Scalability data size time data size: 5000 time: 2.3139 seconds data size: 10000 time: 5.8752 seconds data size: 15000 time: 12.4535 seconds data size: 20000 time: 18.8466 seconds data size: 25000 time: 28.992 seconds data size: 30000 time: 39.3166 seconds data size: 35000 time: 39.4842 seconds data size: 40000 time: 63.7649 seconds data size: 45000 time: 73.6828 seconds data size: 50000 time: 86.9194 seconds data size: 55000 time: 90.1077 seconds data size: 60000 time: 125.0228 seconds data size: 65000 time: 149.1858 seconds data size: 70000 time: 177.4184 seconds data size: 75000 time: 204.0712 seconds data size: 80000 time: 220.502 seconds data size: 85000 time: 251.7625 seconds data size: 100000 time: 257.563 seconds | The Stability The algorithm is only single-parameter, even more it not sensitive to changes in that parameter, k. You may guess that from the following chart yourself. This is of great benefit for you as a data exploration analyst. You can simply explore the dataset using an arbitrary k. Being Non-sensitive to changes in k, make it robust and stable. Reveal the propagation one of the top performing feature in this algorithm is enabling you to watch how your clusters propagate to construct the final output clusters. just use the parameter 'prop_step' as in the following example: ```python dataset = \"t7.10k\" # data_path = 'datasets/denmune/chameleon/' # train file data_file = data_path + dataset +'.csv' X_train = pd.read_csv(data_file, sep=',', header=None) from itertools import chain # Denmune's Paramaters knn = 39 # number of k-nearest neighbor, the only parameter required by the algorithm # create list of differnt snapshots of the propagation snapshots = chain(range(2,5), range(5,50,10), range(50, 100, 25), range(100,500,100), range(500,2000, 250), range(1000,5500, 500)) from IPython.display import clear_output for snapshot in snapshots: print (\"itration\", snapshot ) clear_output(wait=True) dm = DenMune(train_data=X_train, k_nearest=knn, rgn_tsne=False, prop_step=snapshot) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=False) ``` Interact with the algorithm This notebook allows you interact with the algorithm in many aspects: - you can choose which dataset to cluster (among 4 chameleon datasets) - you can decide which number of k-nearest neighbor to use - show noise on/off; thus you can invesetigate noise detected by the algorithm - show analyzer on/off How to run and test Launch Examples in Repo2Docker Binder Simply use our repo2docker offered by mybinder.org, which encapsulate the algorithm and all required data in one virtual machine instance. All Jupyter notebooks examples found in this repository will be also available to you in action to practice in this respo2docer. Thanks mybinder.org, you made it possible! 2. Launch each Example in Google Research, CoLab Need to test examples one by one, then here another option. Use colab offered by google research to test each example individually. Here is a list of Google CoLab URL to use the algorithm interactively ---------------------------------------------------------------------- Dataset CoLab URL How to use it - colab Chameleon datasets - colab 2D Shape datasets - colab MNIST dataset - colab iris dataset - colab Get 97% by training MNIST dataset - colab Non-groundtruth datasets - colab Noise detection - colab Validation - colab How it propagates - colab Snapshots of propagation - colab Scalability - colab Stability vs number of nearest neighbors - colab k-nearest-evolution - colab 3. Launch each Example in Kaggle workspace If you are a kaggler like me, then Kaggle, the best workspace where data scientist meet, should fit you to test the algorithm with great experience. | Dataset | Kaggle URL | | ---------------------------------------- | ------------------------------------------------------------ | | When less means more - kaggle | [![When less means more - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/when-less-means-more) | | Non-groundtruth datasets - kaggle | [![Non-groundtruth datasets](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/detecting-non-groundtruth-datasets) | | 2D Shape datasets - kaggle | [![2D Shape datasets - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/detection-of-2d-shape-datasets) | | MNIST dataset kaggle | [![MNIST dataset - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/get-97-using-simple-yet-one-parameter-algorithm) | | Iris dataset kaggle | [![iris dataset - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/denmune-clustering-iris-dataset) | | Training MNIST to get 97% | [![Training MNIST to get 97%](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/training-mnist-dataset-to-get-97) | | Noise detection - kaggle | [![Noise detection - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/noise-detection) | | Validation - kaggle | [![Validation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/validate-in-5-built-in-validity-insexes) | | The beauty of propagation - kaggle | [![The beauty of propagation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/the-beauty-of-clusters-propagation) | | The beauty of propagation part2 - kaggle | [![The beauty of propagation part 2 - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/the-beauty-of-propagation-part2) | | Snapshots of propagation -kaggle | [![The beauty of propagation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/beauty-of-propagation-part3) | | Scalability kaggle | [![Scalability - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/scalability-vs-speed) | | Stability - kaggle | [![Stability - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/stability-vs-number-of-nearest-neighbor) | | k-nearest-evolution - kaggle | [![k-nearest-evolution - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/k-nearest-evolution) | How to cite ===== If you have used this codebase in a scientific publication and wish to cite it, please use the Journal of Pattern Recognition article Mohamed Abbas McInnes, Adel El-Zoghaby, Amin Ahoukry, *DenMune: Density peak based clustering using mutual nearest neighbors* In: Journal of Pattern Recognition, Elsevier, volume 109, number 107589. January 2021 bib @article{ABBAS2021107589, title = {DenMune: Density peak based clustering using mutual nearest neighbors}, journal = {Pattern Recognition}, volume = {109}, pages = {107589}, year = {2021}, issn = {0031-3203}, doi = {https://doi.org/10.1016/j.patcog.2020.107589}, url = {https://www.sciencedirect.com/science/article/pii/S0031320320303927}, author = {Mohamed Abbas and Adel El-Zoghabi and Amin Shoukry}, keywords = {Clustering, Mutual neighbors, Dimensionality reduction, Arbitrary shapes, Pattern recognition, Nearest neighbors, Density peak}, abstract = {Many clustering algorithms fail when clusters are of arbitrary shapes, of varying densities, or the data classes are unbalanced and close to each other, even in two dimensions. A novel clustering algorithm \u201cDenMune\u201d is presented to meet this challenge. It is based on identifying dense regions using mutual nearest neighborhoods of size K, where K is the only parameter required from the user, besides obeying the mutual nearest neighbor consistency principle. The algorithm is stable for a wide range of values of K. Moreover, it is able to automatically detect and remove noise from the clustering process as well as detecting the target clusters. It produces robust results on various low and high dimensional datasets relative to several known state of the art clustering algorithms.} } Licensing The DenMune algorithm is 3-clause BSD licensed. Enjoy. Task List [x] Update Github with the DenMune sourcode [x] create repo2docker repository [x] Create pip Package [x] create CoLab shared examples [x] create documentation [x] create Kaggle shared examples [x] PEP8 compliant [x] Continuous integration [x] scikit-learn compatible [x] creating unit tests (coverage: 100%) [x] generating API documentation [ ] create conda package","title":"Index"},{"location":"ml/denmune/#denmune-a-density-peak-clustering-algorithm","text":"DenMune a clustering algorithm that can find clusters of arbitrary size, shapes and densities in two-dimensions. Higher dimensions are first reduced to 2-D using the t-sne. The algorithm relies on a single parameter K (the number of nearest neighbors). The results show the superiority of the algorithm. Enjoy the simplicity but the power of DenMune. Scientific Work Paper Journal Data Coding & Maintenance Git Repo Code Style Installation CI Workflow Code Coverage Docs & Tutorials Read the Docs Repo2Docker Colab kaggle ReviewNB Downloads Stats downloads/day download/week download/month Suggestions & Reporting Issues Github Gitter Slack Based on the paper Paper Mohamed Abbas, Adel El-Zoghabi, Amin Shoukry, DenMune: Density peak based clustering using mutual nearest neighbors In: Journal of Pattern Recognition, Elsevier, volume 109, number 107589, January 2021 DOI: https://doi.org/10.1016/j.patcog.2020.107589 Documentation: Documentation, including tutorials, are available on https://denmune.readthedocs.io [![read the documentation](https://img.shields.io/badge/read_the-docs-orange)](https://denmune.readthedocs.io/en/latest/?badge=latest) Watch it in action This 30 seconds will tell you how a density-based algorithm, DenMune propagates: When less means more Most calssic clustering algorithms fail in detecting complex clusters where clusters are of different size, shape, density, and being exist in noisy data. Recently, a density-based algorithm named DenMune showed great ability in detecting complex shapes even in noisy data. it can detect number of clusters automatically, detect both pre-identified-noise and post-identified-noise automatically and removing them. It can achieve accuracy reach 100% in some classic pattern problems, achieve 97% in MNIST dataset. A great advantage of this algorithm is being single-parameter algorithm. All you need is to set number of k-nearest neighbor and the algorithm will care about the rest. Being Non-sensitive to changes in k, make it robust and stable. Keep in mind, the algorithm reduce any N-D dataset to only 2-D dataset initially, so it is a good benefit of this algorithm is being always to plot your data and explore it which make this algorithm a good candidate for data exploration. Finally, the algorithm comes with neat package for visualizing data, validating it and analyze the whole clustering process. How to install DenMune Simply install DenMune clustering algorithm using pip command from the official Python repository From the shell run the command shell pip install denmune From Jupyter notebook cell run the command ipython3 !pip install denmune How to use DenMune Once DenMune is installed, you just need to import it python from denmune import DenMune ###### Please note that first denmune (the package) in small letters, while the other one(the class itself) has D and M in capital case. Read data There are four possible cases of data: - only train data without labels - only labeled train data - labeled train data in addition to test data without labels - labeled train data in addition to labeled test data ```python #============================================= # First scenario: train data without labels # ============================================ data_path = 'datasets/denmune/chameleon/' dataset = \"t7.10k.csv\" data_file = data_path + dataset # train data without labels X_train = pd.read_csv(data_file, sep=',', header=None) knn = 39 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=True) ``` This is an intuitive dataset which has no groundtruth provided ```python #============================================= # Second scenario: train data with labels # ============================================ data_path = 'datasets/denmune/shapes/' dataset = \"aggregation.csv\" data_file = data_path + dataset # train data with labels X_train = pd.read_csv(data_file, sep=',', header=None) y_train = X_train.iloc[:, -1] X_train = X_train.drop(X_train.columns[-1], axis=1) knn = 6 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, train_truth= y_train, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=True) ``` Datset groundtruth Dataset as detected by DenMune at k=6 ```python #================================================================= # Third scenario: train data with labels in addition to test data # ================================================================ data_path = 'datasets/denmune/pendigits/' file_2d = data_path + 'pendigits-2d.csv' # train data with labels X_train = pd.read_csv(data_path + 'train.csv', sep=',', header=None) y_train = X_train.iloc[:, -1] X_train = X_train.drop(X_train.columns[-1], axis=1) # test data without labels X_test = pd.read_csv(data_path + 'test.csv', sep=',', header=None) X_test = X_test.drop(X_test.columns[-1], axis=1) knn = 50 # k-nearest neighbor, the only parameter required by the algorithm dm = DenMune(train_data=X_train, train_truth= y_train, test_data= X_test, k_nearest=knn) labels, validity = dm.fit_predict(show_analyzer=True, show_noise=True) ``` dataset groundtruth dataset as detected by DenMune at k=50 test data as predicted by DenMune on training the dataset at k=50 Algorithm's Parameters Parameters used within the initialization of the DenMune class python def __init__ (self, train_data=None, test_data=None, train_truth=None, test_truth=None, file_2d =None, k_nearest=None, rgn_tsne=False, prop_step=0, ): train_data: data used for training the algorithm default: None. It should be provided by the use, otherwise an error will raise. train_truth: labels of training data default: None test_data: data used for testing the algorithm test_truth: labels of testing data default: None k_nearest: number of nearest neighbor default: 0. the default is invalid. k-nearest neighbor should be at least 1. rgn_tsn: when set to True: It will regenerate the reduced 2-D version of the N-D dataset each time the algorithm run. when set to False: It will generate the reduced 2-D version of the N-D dataset first time only, then will reuse the saved exist file default: True file_2d: name (include location) of file used save/load the reduced 2-d version if empty: the algorithm will create temporary file named '_temp_2d' default: None prop_step: size of increment used in showing the clustering propagation. leave this parameter set to 0, the default value, unless you are willing intentionally to enter the propagation mode. default: 0 Parameters used within the fit_predict function: python def fit_predict(self, validate=True, show_plots=True, show_noise=True, show_analyzer=True ): validate: validate data on/off according to five measures integrated with DenMune (Accuracy. F1-score, NMI index, AMI index, ARI index) default: True show_plots: show/hide plotting of data default: True show_noise: show/hide noise and outlier default: True show_analyzer: show/hide the analyzer default: True The Analyzer The algorithm provide an exploratory tool called analyzer, once called it will provide you with in-depth analysis on how your clustering results perform. Noise Detection DenMune detects noise and outlier automatically, no need to any further work from your side. It plots pre-identified noise in black It plots post-identified noise in light grey You can set show_noise parameter to False. ```python # let us show noise m = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_noise=True) ``` ```python # let us show clean data by removing noise m = DenMune(train_data=X_train, k_nearest=knn) labels, validity = dm.fit_predict(show_noise=False) ``` noisy data clean data Validatation You can get your validation results using 3 methods by showing the Analyzer extract values from the validity returned list from fit_predict function extract values from the Analyzer dictionary - There are five validity measures built-in the algorithm, which are: ACC, Accuracy F1 score NMI index (Normalized Mutual Information) AMI index (Adjusted Mutual Information) ARI index (Adjusted Rand Index) K-nearest Evolution The following chart shows the evolution of pre and post identified noise in correspondence to increase of number of knn. Also, detected number of clusters is analyzed in the same chart in relation with both types of identified noise. The Scalability data size time data size: 5000 time: 2.3139 seconds data size: 10000 time: 5.8752 seconds data size: 15000 time: 12.4535 seconds data size: 20000 time: 18.8466 seconds data size: 25000 time: 28.992 seconds data size: 30000 time: 39.3166 seconds data size: 35000 time: 39.4842 seconds data size: 40000 time: 63.7649 seconds data size: 45000 time: 73.6828 seconds data size: 50000 time: 86.9194 seconds data size: 55000 time: 90.1077 seconds data size: 60000 time: 125.0228 seconds data size: 65000 time: 149.1858 seconds data size: 70000 time: 177.4184 seconds data size: 75000 time: 204.0712 seconds data size: 80000 time: 220.502 seconds data size: 85000 time: 251.7625 seconds data size: 100000 time: 257.563 seconds | The Stability The algorithm is only single-parameter, even more it not sensitive to changes in that parameter, k. You may guess that from the following chart yourself. This is of great benefit for you as a data exploration analyst. You can simply explore the dataset using an arbitrary k. Being Non-sensitive to changes in k, make it robust and stable. Reveal the propagation one of the top performing feature in this algorithm is enabling you to watch how your clusters propagate to construct the final output clusters. just use the parameter 'prop_step' as in the following example: ```python dataset = \"t7.10k\" # data_path = 'datasets/denmune/chameleon/' # train file data_file = data_path + dataset +'.csv' X_train = pd.read_csv(data_file, sep=',', header=None) from itertools import chain # Denmune's Paramaters knn = 39 # number of k-nearest neighbor, the only parameter required by the algorithm # create list of differnt snapshots of the propagation snapshots = chain(range(2,5), range(5,50,10), range(50, 100, 25), range(100,500,100), range(500,2000, 250), range(1000,5500, 500)) from IPython.display import clear_output for snapshot in snapshots: print (\"itration\", snapshot ) clear_output(wait=True) dm = DenMune(train_data=X_train, k_nearest=knn, rgn_tsne=False, prop_step=snapshot) labels, validity = dm.fit_predict(show_analyzer=False, show_noise=False) ``` Interact with the algorithm This notebook allows you interact with the algorithm in many aspects: - you can choose which dataset to cluster (among 4 chameleon datasets) - you can decide which number of k-nearest neighbor to use - show noise on/off; thus you can invesetigate noise detected by the algorithm - show analyzer on/off How to run and test Launch Examples in Repo2Docker Binder Simply use our repo2docker offered by mybinder.org, which encapsulate the algorithm and all required data in one virtual machine instance. All Jupyter notebooks examples found in this repository will be also available to you in action to practice in this respo2docer. Thanks mybinder.org, you made it possible! 2. Launch each Example in Google Research, CoLab Need to test examples one by one, then here another option. Use colab offered by google research to test each example individually. Here is a list of Google CoLab URL to use the algorithm interactively ---------------------------------------------------------------------- Dataset CoLab URL How to use it - colab Chameleon datasets - colab 2D Shape datasets - colab MNIST dataset - colab iris dataset - colab Get 97% by training MNIST dataset - colab Non-groundtruth datasets - colab Noise detection - colab Validation - colab How it propagates - colab Snapshots of propagation - colab Scalability - colab Stability vs number of nearest neighbors - colab k-nearest-evolution - colab 3. Launch each Example in Kaggle workspace If you are a kaggler like me, then Kaggle, the best workspace where data scientist meet, should fit you to test the algorithm with great experience. | Dataset | Kaggle URL | | ---------------------------------------- | ------------------------------------------------------------ | | When less means more - kaggle | [![When less means more - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/when-less-means-more) | | Non-groundtruth datasets - kaggle | [![Non-groundtruth datasets](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/detecting-non-groundtruth-datasets) | | 2D Shape datasets - kaggle | [![2D Shape datasets - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/detection-of-2d-shape-datasets) | | MNIST dataset kaggle | [![MNIST dataset - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/get-97-using-simple-yet-one-parameter-algorithm) | | Iris dataset kaggle | [![iris dataset - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/denmune-clustering-iris-dataset) | | Training MNIST to get 97% | [![Training MNIST to get 97%](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/training-mnist-dataset-to-get-97) | | Noise detection - kaggle | [![Noise detection - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)]( https://www.kaggle.com/egyfirst/noise-detection) | | Validation - kaggle | [![Validation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/validate-in-5-built-in-validity-insexes) | | The beauty of propagation - kaggle | [![The beauty of propagation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/the-beauty-of-clusters-propagation) | | The beauty of propagation part2 - kaggle | [![The beauty of propagation part 2 - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/the-beauty-of-propagation-part2) | | Snapshots of propagation -kaggle | [![The beauty of propagation - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/beauty-of-propagation-part3) | | Scalability kaggle | [![Scalability - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/scalability-vs-speed) | | Stability - kaggle | [![Stability - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/stability-vs-number-of-nearest-neighbor) | | k-nearest-evolution - kaggle | [![k-nearest-evolution - kaggle](https://kaggle.com/static/images/open-in-kaggle.svg)](https://www.kaggle.com/egyfirst/k-nearest-evolution) | How to cite ===== If you have used this codebase in a scientific publication and wish to cite it, please use the Journal of Pattern Recognition article Mohamed Abbas McInnes, Adel El-Zoghaby, Amin Ahoukry, *DenMune: Density peak based clustering using mutual nearest neighbors* In: Journal of Pattern Recognition, Elsevier, volume 109, number 107589. January 2021 bib @article{ABBAS2021107589, title = {DenMune: Density peak based clustering using mutual nearest neighbors}, journal = {Pattern Recognition}, volume = {109}, pages = {107589}, year = {2021}, issn = {0031-3203}, doi = {https://doi.org/10.1016/j.patcog.2020.107589}, url = {https://www.sciencedirect.com/science/article/pii/S0031320320303927}, author = {Mohamed Abbas and Adel El-Zoghabi and Amin Shoukry}, keywords = {Clustering, Mutual neighbors, Dimensionality reduction, Arbitrary shapes, Pattern recognition, Nearest neighbors, Density peak}, abstract = {Many clustering algorithms fail when clusters are of arbitrary shapes, of varying densities, or the data classes are unbalanced and close to each other, even in two dimensions. A novel clustering algorithm \u201cDenMune\u201d is presented to meet this challenge. It is based on identifying dense regions using mutual nearest neighborhoods of size K, where K is the only parameter required from the user, besides obeying the mutual nearest neighbor consistency principle. The algorithm is stable for a wide range of values of K. Moreover, it is able to automatically detect and remove noise from the clustering process as well as detecting the target clusters. It produces robust results on various low and high dimensional datasets relative to several known state of the art clustering algorithms.} } Licensing The DenMune algorithm is 3-clause BSD licensed. Enjoy. Task List [x] Update Github with the DenMune sourcode [x] create repo2docker repository [x] Create pip Package [x] create CoLab shared examples [x] create documentation [x] create Kaggle shared examples [x] PEP8 compliant [x] Continuous integration [x] scikit-learn compatible [x] creating unit tests (coverage: 100%) [x] generating API documentation [ ] create conda package","title":"DenMune: A density-peak clustering algorithm"}]}